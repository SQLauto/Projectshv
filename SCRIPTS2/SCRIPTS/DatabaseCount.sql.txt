-- SCRIPT TO GATHER SQL SERVER INFORMATION FROM SERVER LIST.
-- AUTHOR: EDUARDO SAENZ
-- DATE: 2011/01/07

-- NOTE: WORKS ONLY ON SQLSERVER 2005 AND SUPERIOR (REQUIRES TRY/CATCH STATEMENTS FOR ERROR HANDLING).

-- DECLARE SECTION
DECLARE @ServerName varchar(256)
CREATE TABLE #TargetServersTemp (ServerName nvarchar(256))
CREATE TABLE #TargetServers (ServerName nvarchar(256))
CREATE TABLE ##TargetServersEduardo1701D(ServerName sql_variant, ProductLevel sql_variant, ProductVersion sql_variant, databasename sql_variant, servercount bigint, databasecount bigint)

-- PREPARATION SECTION

INSERT INTO #TargetServersTemp (ServerName)
SELECT 'DENCLTA2PP' UNION ALL
SELECT 'DENCLTCMSSQL01' UNION ALL
SELECT 'DENCLTCONAPP01' UNION ALL
SELECT 'DENCLTMAX01' UNION ALL
SELECT 'DENCLTPET01' UNION ALL
SELECT 'PITMASP01' UNION ALL
SELECT 'DENCLTSPF01\SPSQL' UNION ALL
SELECT 'DENCLTTAX01' UNION ALL
SELECT 'PITFNWP01' UNION ALL
SELECT 'PITMSQLP01' UNION ALL
SELECT 'PITFNDP01' UNION ALL
SELECT 'PITSQLP03' UNION ALL
SELECT 'PITSQLP02' UNION ALL
SELECT 'PITSQLP04' UNION ALL
SELECT 'PITSQLP05' UNION ALL
SELECT 'PITHYSQLP01' UNION ALL
SELECT 'PITGMSSQLP01' UNION ALL
SELECT 'PITTFSP01' UNION ALL
SELECT 'PSPSQL' UNION ALL
SELECT 'PITSPSQLP01' UNION ALL
SELECT 'PITSPSQLP02' UNION ALL
SELECT 'DENCLTCMSSQL02' UNION ALL
SELECT 'DENADCA2PP' UNION ALL
SELECT 'DENADCCONAPP01' UNION ALL
SELECT 'DENADCSPF01\SPSQL' UNION ALL
SELECT 'DENCLTCMSSQL02\TEST' UNION ALL
SELECT 'PHLSQLT03' UNION ALL
SELECT 'PHLSQLT02' UNION ALL
SELECT 'PHLGMSSQLT01' UNION ALL
SELECT 'PITMSQLT01' UNION ALL
SELECT 'PHLTFST01' UNION ALL
SELECT 'PHLSPSQLT01' UNION ALL
SELECT 'TSPSQL' UNION ALL
SELECT 'PHLSPSQLT02' UNION ALL
SELECT 'DENCLTCMSSQL02\DEV' UNION ALL
SELECT 'PHIHYSQLD01' UNION ALL
SELECT 'DENCLTIABOD01' UNION ALL
SELECT 'DENCLTIABZD01\SQLEXPRESS' UNION ALL
SELECT 'DENCLTIABZD01\SHAREPOINT' UNION ALL
SELECT 'PITGMSSQLD01' UNION ALL
SELECT 'PHLERPTDD01' UNION ALL
SELECT 'PITSPSQLD01' UNION ALL
SELECT 'PHLGMSWLT01' UNION ALL
SELECT 'PHLMSQLD01' UNION ALL
SELECT 'PITWSP01' UNION ALL
SELECT 'PITWST01' UNION ALL
SELECT 'PITSQLP01' UNION ALL
SELECT 'PHLSQLT01' UNION ALL
SELECT 'PITEPOP02' UNION ALL
SELECT 'PITEXLP02' UNION ALL
SELECT 'PITNIQP02' UNION ALL
SELECT 'ZIASRV01B' UNION ALL
SELECT 'PHLERPBOT01' UNION ALL
SELECT 'PITERPBOP01' UNION ALL
SELECT 'PHLERPBOD01' UNION ALL
SELECT 'PHLERPBOQ01' UNION ALL
SELECT 'PHLERPQSAD01' UNION ALL
SELECT 'DENCLTCMSSQL01\S2K5' UNION ALL
SELECT 'PHLSQLD01' UNION ALL
SELECT 'MIDNPM01' UNION ALL
SELECT 'PHLFAXT01 ' UNION ALL
SELECT 'PITFAXP01' UNION ALL
SELECT 'PITIDMP01 ' UNION ALL
SELECT 'PITIDMP01\SQLEXPRESS' UNION ALL
SELECT 'HOUSCADA02' UNION ALL
SELECT 'HOUSCADA04' UNION ALL
SELECT 'PITSMSP01'
SELECT 'PITTAXP01' UNION ALL
SELECT 'PSPSQL' UNION ALL
SELECT 'TSPSQL' UNION ALL
SELECT 'PITMIMP03' UNION ALL
SELECT 'SQLInst1' UNION ALL
SELECT 'PITOCSSQLP01' UNION ALL
SELECT 'DENW2K8T01' UNION ALL
SELECT 'PHLSQLRAT01' UNION ALL
SELECT 'PITA2PSQLP01' UNION ALL
SELECT 'PHLA2PSQLT01' UNION ALL
SELECT 'MIDSCADA02'

INSERT INTO #TargetServersTemp (ServerName)
EXEC master..xp_CMDShell 'sqlcmd -Lc'

DELETE FROM #TargetServersTemp WHERE ServerName='Servers:' OR ServerName IS NULL

INSERT INTO #TargetServers (ServerName)
SELECT DISTINCT Servername FROM #TargetServersTemp

DROP TABLE #TargetServersTemp
-- GATHER FIRST SERVER IN LIST
SELECT @ServerName = MIN(ServerName) from #TargetServers 

-- LOOP THROUGH SERVERS
WHILE @ServerName IS NOT NULL
BEGIN

-- MESSAGES TO VERIFY PROGRESS
PRINT 'Contacting ' + @ServerName

-- INSERT MARKER FOR SERVER
BEGIN TRY

	-- LINKED SERVER CAN TAKE UP TO 30 SECONDS TO RETURN WITH ERROR, BE PATIENT
	-- ONCE DATA IS GATHERED ON OPENROWSET WE INSERT INTO CONTROL TABLE.

	EXECUTE( '
			INSERT INTO ##TargetServersEduardo1701D 
			SELECT	a.*
			FROM	OPENROWSET(''SQLNCLI'', 
							''Server='+@ServerName+';Trusted_Connection=yes;'',
							''SELECT @@ServerName as ServerName, ''''SUCCESFULL CONNECTION'''',NULL,NULL, 1, 0'') as a
	')

END TRY

BEGIN CATCH

	-- IF THE TRY FAILS WE CATCH THE ERROR AND MAKE A CLEAN EXIT.
	PRINT 'ERROR CONNECTING TO ' + @ServerName 
	INSERT INTO ##TargetServersEduardo1701D VALUES (@ServerName, 'UNABLE TO CONNECT TO SERVER','GO MANUAL IF REQUIRED','STILL COUNTS TO SERVER PACK',1,0)

END CATCH


-- AVOID BREAKING THE SCRIPT IF WE ERROR OUT
BEGIN TRY

	-- LINKED SERVER CAN TAKE UP TO 30 SECONDS TO RETURN WITH ERROR, BE PATIENT
	-- ONCE DATA IS GATHERED ON OPENROWSET WE INSERT INTO CONTROL TABLE.

	EXECUTE( '
			INSERT INTO ##TargetServersEduardo1701D 
			SELECT	a.*
			FROM	OPENROWSET(''SQLNCLI'', 
							''Server='+@ServerName+';Trusted_Connection=yes;'',
							''SELECT @@ServerName as ServerName, serverproperty(''''productversion'''') as ProductVersion, serverproperty(''''productlevel'''') as ProductLevel, NAME as DatabaseName, 0, 1 from sysdatabases '') as a
	')

END TRY

BEGIN CATCH

	-- IF THE TRY FAILS WE CATCH THE ERROR AND MAKE A CLEAN EXIT.
	PRINT 'ERROR CONNECTING TO ' + @ServerName 
	INSERT INTO ##TargetServersEduardo1701D VALUES (@ServerName, 'UNABLE TO COUNT DATABASES','GO MANUAL', '', 0, 0)

END CATCH

	-- SELECT THE NEXT FROM THE LIST
	SELECT @ServerName = MIN(ServerName) from #TargetServers WHERE ServerName> @ServerName

END

-- PRINT OUT THE LIST SO WE CAN COPY/PASTE TO EXCEL (THIS WILL REQUIRE MAINTENANCE IF NEW BULLETINS GET RELEASED)
SELECT *
FROM ##TargetServersEduardo1701D

-- CLEAN MY JUNK
DROP TABLE ##TargetServersEduardo1701D
DROP TABLE #TargetServers

-- EXIT GRACEFULLY...
-- THANK YOU.