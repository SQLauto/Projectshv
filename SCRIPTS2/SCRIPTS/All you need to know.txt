/*All the info that we need to do and to know..  for  one db


By Carlos Elizondo*/

DECLARE @database_name as varchar(190)
,@database_Direction as varchar(590)
, @IM as varchar(190)
, @Backup_Folder_NewFolder as varchar(max)
, @sqlver sql_variant
, @sqlver2 varchar(20)
, @sqlver3 int
, @Direction_final varchar (max)
, @Name_sql varchar (max)
----------------------------------------------------

----------------------------------------------------
----------------------------------------------------


Set @database_name='DBA'
Set @IM='1605462'
Set @Backup_Folder_NewFolder='E:\MP_SQL_B_02\ProdBackup\REG_FED_SYS2_db_SL.BAK'
SELECT @sqlver = SERVERPROPERTY('productversion')
SELECT @sqlver2 = CAST(@sqlver AS varchar(20)) 
select @sqlver3 = SUBSTRING(@sqlver2,1,1)


IF @sqlver3 = 1 set @Name_sql= 'SQL 2008'
IF @sqlver3 = 9 set @Name_sql= 'SQL 2005'
IF @sqlver3 = 8 set @Name_sql= 'SQL 2000'




----------------------------------------------------
----------------------------------------------------
----------------------------------------------------


Set @database_Direction= (Select top (1) physical_device_name  
    from msdb..backupset backupset left join msdb..backupmediafamily backupmediafamily On 
    backupmediafamily.media_set_id = backupset.media_set_id 
    where type in ('D') and database_name =@database_name
    oRDER BY 1 DESC)



/*------------	who I AM	---------------*/

select system_user +'     --     '+ USer_name() +'  --  '+@@SERVERNAME +'     --     '+ @Name_sql   
  as [User                          \Permission      \Server                                      \Version]
/*------------	Last back up ---------------*/

select @database_Direction as Last_backup
/*------------------	Create a sentence to do a back in SQL		--------------------*/



set @Direction_final= REVERSE (@database_Direction)

Set @Direction_final = (Select REVERSE(SUBSTRING(@Direction_final, 
CHARINDEX('\', @Direction_final)+1, LEN(@Direction_final)))) +'\'+@database_name+'_Previous_'+ @IM +'.bkp'



select 'exec master.dbo.xp_backup_database @database='''+@database_name+''',
@filename='''+@Direction_final+'''' as backup_Litespeed

/*------------------		reate a sentence to do a back  Lite Speed SQL	--------------------*/
Select 'BACKUP DATABASE ['+ @database_name +'] 
TO  DISK = N'''+@Direction_final+''' 
WITH  COPY_ONLY,
  NAME = N'''+@database_name+'-Full Database Backup previous_'+@IM+''', 
  STATS = 1'as backups_SQL


/*------------------	DB Sizes   --------------------*/

Select  Round (Sum((cast (size as float)*8)/1024), 2) 	SizeMB  ,
Round (Sum((cast (size as float)*8)/1024)*0.000976, 2)  SizeGB  , 
 Round (Sum((cast (size as float) *8)/1024)*0.000976  /1024, 2) 
 SizeTB,@database_name as DB_Name
 
 FROM sys.master_files 
 WHERE DB_NAME(database_id) =@database_name





/*------------------		last backups  --------------------*/



  Select backup_start_date,backup_finish_date,database_name, 
		physical_device_name, type, backup_size as backup_size, 
		[user_name],database_creation_date,backupset.media_set_id
    
    from msdb..backupset backupset 
    left join msdb..backupmediafamily backupmediafamily 
    On backupmediafamily.media_set_id = backupset.media_set_id 
    
    where type in ('D') and database_name =@database_name
    oRDER BY 1 DESC

/*------------------		Disks 	--------------------*/


CREATE TABLE #DF_Result (Drive CHAR(1), MBFree INT  ) 
INSERT  INTO #DF_Result EXEC master..xp_fixeddrives 

ALTER TABLE #DF_Result
 ADD GBFree Float  NULL, TBFree Float Null 
 
 Update #DF_Result sET GBFree=MBFree*0.000976 
 Update #DF_Result sET TBFree=GBFree*0.000976  
  
  Select Drive,MBFree,Round(GBFree, 2) as GBFree ,
   Round(TBFree,2) as TBFree 
   
   from #DF_Result  
   order by 2 desc 
   
   drop table #DF_Result

/*------------------		Mount points	--------------------*/

--DECLARE @sqlver sql_variant
--DECLARE @sqlver2 varchar(20)
--DECLARE @sqlver3 int
--declare @Direction_final varchar (max)
 


-- 1 = 2008 8 = 2000 and 9 = 2005 1 is short for 10

BEGIN 

--select @sqlver3 only uncomment to see state of version
IF @sqlver3 = 1 GOTO SERVER2008
IF @sqlver3 = 9 GOTO SERVER2000
IF @sqlver3 = 8 GOTO SERVER2000
GOTO THEEND

END

SERVER2008:

declare @svrName varchar(255)
declare @sql varchar(400)

--by default it will take the current server name, we can the set the server name as well
set @svrName = @@SERVERNAME
set @sql = 'powershell.exe -c "Get-WmiObject -Class Win32_Volume -Filter ''DriveType = 3'' | select name,capacity,freespace | foreach{$_.name+''|''+$_.capacity/1048576+''%''+$_.freespace/1048576+''*''}"'

--creating a temporary table
CREATE TABLE #output
(line varchar(255))
--inserting disk name, total space and free space value in to temporary table
insert #output

EXEC xp_cmdshell @sql



--script to retrieve the values in GB from PS Script output

select rtrim(ltrim(SUBSTRING(line,1,CHARINDEX('|',line) -1))) as 'Drive'
,round(cast(rtrim(ltrim(SUBSTRING(line,CHARINDEX('%',line)+1,
(CHARINDEX('*',line) -1)-CHARINDEX('%',line)) )) as Float) /1024 ,0)as 'Free_Space'
,round(cast(rtrim(ltrim(SUBSTRING(line,CHARINDEX('|',line)+1,
(CHARINDEX('%',line) -1)-CHARINDEX('|',line)) )) as Float)/1024,0) as 'Total_Space'
,((round(cast(rtrim(ltrim(SUBSTRING(line,CHARINDEX('%',line)+1,
(CHARINDEX('*',line) -1)-CHARINDEX('%',line)) )) as Float) /1024 ,0)) / (round(cast(rtrim(ltrim(SUBSTRING(line,CHARINDEX('|',line)+1,
(CHARINDEX('%',line) -1)-CHARINDEX('|',line)) )) as Float)/1024,0)) * 100) as Percent_Free
from #output
where line like '[A-Z][:]%'
--and ((round(cast(rtrim(ltrim(SUBSTRING(line,CHARINDEX('%',line)+1,
-- (CHARINDEX('*',line) -1)-CHARINDEX('%',line)) )) as Float) /1024 ,0)) / (round(cast(rtrim(ltrim(SUBSTRING(line,CHARINDEX('|',line)+1,
--(CHARINDEX('%',line) -1)-CHARINDEX('|',line)) )) as Float)/1024,0)) * 100) < 5
order by drive
--script to drop the temporary table
drop table #output

GOTO THEEND

SERVER2000:
SET NOCOUNT ON;


DECLARE @v_cmd nvarchar(255)
,@v_drive char(99)
,@v_sql nvarchar(255)
,@i int


SELECT @v_cmd = 'fsutil volume diskfree %d%'
SET @i = 1

CREATE TABLE #drives(iddrive smallint ,drive char(99))
CREATE TABLE #t(drive char(99),shellCmd nvarchar(500));
CREATE TABLE #total(drive char(99),freespace decimal(9,2), totalspace decimal(9,2));



-- Use mountvol command to 

INSERT #drives (drive) 
EXEC master..xp_cmdshell 'mountvol'
DELETE #drives WHERE drive not like '%:\%' or drive is null
WHILE (@i <= (SELECT count(drive) FROM #drives))
BEGIN
UPDATE #drives 
SET iddrive=@i
WHERE drive = (SELECT TOP 1 drive FROM #drives WHERE iddrive IS NULL)
SELECT @v_sql = REPLACE(@v_cmd,'%d%',LTRIM(RTRIM(drive))) from #drives where iddrive=@i

INSERT #t(shellCmd) 
EXEC master..xp_cmdshell @v_sql

UPDATE #t 
SET #t.drive = d.drive
FROM #drives d
WHERE #t.drive IS NULL and iddrive=@i
SET @i = @i + 1

END



INSERT INTO #total

SELECT bb.drive
,CAST(CAST(REPLACE(REPLACE(SUBSTRING(shellCmd,CHARINDEX(':',shellCmd)+1,LEN(shellCmd)),SPACE(1),SPACE(0))
,char(13),SPACE(0)) AS NUMERIC(32,2))/1024/1024/1024 AS DECIMAL(9,2)) as freespace
,tt.titi as total
FROM #t bb
JOIN (SELECT drive
,CAST(CAST(REPLACE(REPLACE(SUBSTRING(shellCmd,CHARINDEX(':',shellCmd)+1,LEN(shellCmd)),SPACE(1),SPACE(0))
,char(13),SPACE(0)) AS NUMERIC(32,2))/1024/1024/1024 AS DECIMAL(9,2)) as titi
FROM #t

WHERE drive IS NOT NULL
AND shellCmd NOT LIKE '%free bytes%') tt
ON bb.drive = tt.drive
WHERE bb.drive IS NOT NULL
AND bb.shellCmd NOT LIKE '%avail free bytes%'
AND bb.shellCmd LIKE '%free bytes%';



-- SET FreespaceTimestamp = (GETDATE())

SELECT RTRIM(LTRIM(drive)) as Mount_Drives
,freespace as Free_Space
,totalspace as Total_Space
,CAST((freespace/totalspace * 100) AS DECIMAL(5,2)) as [Percent_Free]

FROM #total
--WHERE (Freespace/totalspace * 100) < 5
ORDER BY drive
DROP TABLE #drives
DROP TABLE #t
DROP TABLE #total
THEEND:

/*------------------	where isplaced all the datafiles	--------------------*/
if exists( Select * from tempdb.dbo.sysobjects where id = object_id(N'tempdb.dbo.##DbFilesInventory') )
	drop table ##DbFilesInventory

Create table ##DbFilesInventory 
(DbName sysname, DBFileId int, LogicalName sysname, 
physical_name varchar(500), sizeMB float, usedMB float)

exec sp_msforeachdb 'USE [?];
insert into ##DbFilesInventory
SELECT DB_NAME(database_id),
s.file_id AS [ID],
s.name AS [Name],
s.physical_name AS [FileName],
Round(s.size /128.0,2) AS [SizeMB],
Round(CAST(FILEPROPERTY(s.name, ''SpaceUsed'') AS float)/128.0,2) AS [UsedSpace]
FROM sys.master_files AS s 
WHERE s.database_id = db_id()
ORDER BY [ID] ASC' 


Select *,sizeMB-usedMB as [FreeMB] , 
FreeGBs = Round((sizeMB-usedMB) / 1024.0,2),
Round(((sizeMB-usedMB) /  SizeMB) * 100,2) as [Pct Free]  --usedMB                 
, +Char(13)+'Use [' +DbName+']
Go '+Char(13)+'DBCC SHRINKFILE (N'''+LogicalName+''',0,TRUNCATEONLY)'+Char(13)+' 
GO '+Char(13)+Char(13)+Char(13) as Sentence  from ##DbFilesInventory 
Where dbname  Like '%'+@database_name+'%'
--where physical_name like 'J:%'
Order by 2


/*------------------	shrinks!	--------------------*/

Select  'Use [' +DbName+'] 
Go '+Char(13)+'DBCC SHRINKFILE (N'''+LogicalName+''',0,TRUNCATEONLY)'+Char(13)+'GO'+Char(13)
as Sentence  from ##DbFilesInventory
Where dbname  Like '%'+@database_name+'%'
--where physical_name like 'J:%'


/*------------------	info from the backups  --------------------*/
select 'exec master.dbo.xp_restore_filelistonly @filename = '''+@Backup_Folder_NewFolder+''''
 as Backup_Files_Data
