set nocount on
/* Cuales tienen mas para probar
BY Carlos Elizondo





CREATE TABLE #temporal ( 
    LoginName nvarchar(max), 
    DBname nvarchar(max), 
    Username nvarchar(max), 
    AliasName nvarchar(max) 
)  
INSERT INTO #temporal 
EXEC master..sp_msloginmappings 
-- display results 


SELECT loginname, count(loginname) as DB_Involved FROM   #temporal 
group by loginname 
order by count(loginname) desc 

*/


IF OBJECT_ID('tempdb..#temporal') IS NOT NULL  DROP TABLE #temporal  
IF OBJECT_ID('tempdb..#output') IS NOT NULL  DROP TABLE #output  
IF OBJECT_ID('tempdb..#Mappings') IS NOT NULL  DROP TABLE #Mappings

go

            DECLARE @name sysname,
             @type varchar (1),
             @LoginName sysname,
             @hasaccess int,
             @denylogin int,
             @is_disabled int,
             @PWD_varbinary  varbinary (256),
             @PWD_string  varchar (514),
             @SID_varbinary varbinary (85),
             @SID_string varchar (514),
             @tmpstr  varchar (1024),
             @is_policy_checked varchar (3),
             @is_expiration_checked varchar (3),
			 @DatabaseName sysname,
			 @SQL NVARCHAR(4000),
			 @sid VARCHAR(255),
             @defaultdb sysname,
			 @Sizedb as Int,
			 @Command as Varchar (8000),
			 @Command1 as Varchar (8000),
			 @Command3 as Varchar (3),
			 @Command2 as Varchar (8000),			 
			 @Initial As int,
			 @Pass As int             
/*--------------------------------------------------------------------
----------------------------------------------------------------------*/             
SET @LoginName = 'regfed_link_dev'
/*--------------------------------------------------------------------
----------------------------------------------------------------------*/             

            Create Table #output 
                (
                    id int IDENTITY(1,1),
                    cmd varchar(8000)
                )


            IF (@LoginName IS NULL)
              DECLARE login_curs CURSOR FOR

                  SELECT p.sid, p.name, p.type, p.is_disabled, p.default_database_name, l.hasaccess, l.denylogin FROM 
            sys.server_principals p LEFT JOIN sys.syslogins l
                  ON ( l.name = p.name ) WHERE p.type IN ( 'S', 'G', 'U' ) AND p.name <> 'sa'
            ELSE
              DECLARE login_curs CURSOR FOR


                  SELECT p.sid, p.name, p.type, p.is_disabled, p.default_database_name, l.hasaccess, l.denylogin FROM 
            sys.server_principals p LEFT JOIN sys.syslogins l
                  ON ( l.name = p.name ) WHERE p.type IN ( 'S', 'G', 'U' ) AND p.name = @LoginName
            OPEN login_curs

            FETCH NEXT FROM login_curs INTO @SID_varbinary, @name, @type, @is_disabled, @defaultdb, @hasaccess, @denylogin
            IF (@@fetch_status = -1)

            SET @tmpstr = ''
            PRINT @tmpstr
            SET @tmpstr = ''
            PRINT @tmpstr
            PRINT ''
            WHILE (@@fetch_status <> -1)
            BEGIN
              IF (@@fetch_status <> -2)
              BEGIN
  

                IF (@type IN ( 'G', 'U'))
                BEGIN -- NT authenticated account/group

                  SET @tmpstr = '--CREATE LOGIN ' + QUOTENAME( @name ) + ' FROM WINDOWS WITH DEFAULT_DATABASE = [' + @defaultdb + ']'

                END
                ELSE BEGIN -- SQL Server authentication
                    -- obtain password and sid
                        SET @PWD_varbinary = CAST( LOGINPROPERTY( @name, 'PasswordHash' ) AS varbinary (256) )
                    EXEC sp_hexadecimal @PWD_varbinary, @PWD_string OUT
                    EXEC sp_hexadecimal @SID_varbinary,@SID_string OUT

                    -- obtain password policy state
                    SELECT @is_policy_checked = CASE is_policy_checked WHEN 1 THEN 'ON' WHEN 0 THEN 'OFF' ELSE NULL END FROM sys.sql_logins WHERE name = @name
                    SELECT @is_expiration_checked = CASE is_expiration_checked WHEN 1 THEN 'ON' WHEN 0 THEN 'OFF' ELSE NULL END FROM sys.sql_logins WHERE name = @name

                        SET @tmpstr = '--CREATE LOGIN ' + QUOTENAME( @name ) + ' WITH PASSWORD = ' + @PWD_string + ' HASHED, SID = ' + @SID_string + ', DEFAULT_DATABASE = [' + @defaultdb + ']'
                    IF ( @is_policy_checked IS NOT NULL )
                    BEGIN
                      SET @tmpstr = @tmpstr + ', CHECK_POLICY = ' + @is_policy_checked
                    END
                    IF ( @is_expiration_checked IS NOT NULL )
                    BEGIN
                      SET @tmpstr = @tmpstr + ', CHECK_EXPIRATION = ' + @is_expiration_checked
                    END
                END
                IF (@denylogin = 1)
                BEGIN -- login is denied access
                  SET @tmpstr = @tmpstr + '; DENY CONNECT SQL TO ' + QUOTENAME( @name )
                END
                ELSE IF (@hasaccess = 0)
                BEGIN -- login exists but does not have access
                  SET @tmpstr = @tmpstr + '; REVOKE CONNECT SQL TO ' + QUOTENAME( @name )
                END
                IF (@is_disabled = 1)
                BEGIN -- login is disabled
                  SET @tmpstr = @tmpstr + '; ALTER LOGIN ' + QUOTENAME( @name ) + ' DISABLE'
                END
                --PRINT @tmpstr
                insert into  #output  (cmd) values (@tmpstr)
              END

              FETCH NEXT FROM login_curs INTO @SID_varbinary, @name, @type, @is_disabled, @defaultdb, @hasaccess, @denylogin
               END
            CLOSE login_curs
            DEALLOCATE login_curs
--select '/*-------HASH PASS-----'+ cmd +'*/' from  #output 
  Set @Command1=(select '/*-------HASH PASS-----'+ cmd +'*/' from  #output )
----------------------Filtrer--------------------------------------------------




SET @sid = (SELECT sid FROM sys.server_principals WHERE [name] = @LoginName)

CREATE TABLE #Mappings ( 
  DatabaseName sysname, 
  UserName sysname)

DECLARE cursDatabases CURSOR FAST_FORWARD FOR SELECT name FROM sys.databases

OPEN cursDatabases

FETCH NEXT FROM cursDatabases INTO @DatabaseName

WHILE (@@FETCH_STATUS = 0) 
BEGIN 
   SET @SQL = 'INSERT INTO #Mappings (DatabaseName, UserName) 
             SELECT ''' + @DatabaseName + ''', name 
             FROM [' + @DatabaseName + '].sys.database_principals 
             WHERE sid = ''' + @sid + ''';'; 
                 
   EXEC(@SQL)
    
   FETCH NEXT FROM cursDatabases INTO @DatabaseName
END 

CLOSE cursDatabases
DEALLOCATE cursDatabases

 -----------Add index----------------------
ALTER TABLE #Mappings 
  ADD 
indice int NOT NULL IDENTITY (1, 1)

  
--SELECT Indice,databasename  FROM #Mappings  


  Set @Command1=(select '/*-------HASH PASS-----'+ cmd +'' from  #output )

set @Command2='DBS: '+(Select cast (Count(*)  as VArchar(3) )as A from #Mappings)+'
'
set @Command3='*/'
--------------loop-------------------------

print @Command1
Print @Command2

Select DatabaseName Names from #Mappings
Print @Command3

---- Pass
Set @pass =0
Set @Initial = (Select Top(1) indice from #Mappings order by indice desc )

--when you stop the do
WHILE @Initial>=0

Begin
--set the counter
set @pass= @pass+1
Set @Sizedb=@Initial-1

Declare @dbnm as varchar (500)
Set @dbnm= (Select databasename from #Mappings where Indice=@pass)

-- command script permissions

Set @Command='/*
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
-------------------------------------Script#'+  cast (@pass as Varchar(30))+' Db Name:'+Upper(@dbnm)+'-------------------------------------
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------*/

Set nocount on 
go

use '+@dbnm+'
go
SELECT ''USE ''+DB_NAME(dbid)+CHAR(10)+''GO'' FROM master..sysprocesses WHERE spid=@@SPID
-------------------------------------------
--***GRANTING DB ACCESS TO USERS***--
-------------------------------------------
SELECT ''IF NOT EXISTS(SELECT * FROM sys.database_principals WHERE name =''''+U.name+'''')''
+CHAR(10)+''CREATE USER ''+QUOTENAME(U.name)+'' FOR LOGIN ''+QUOTENAME(L.name COLLATE DATABASE_DEFAULT)
+	CASE U.type_desc
		WHEN ''WINDOWS_USER'' THEN '' WITH DEFAULT_SCHEMA = ''+QUOTENAME(U.default_schema_name)+'';''
		WHEN ''SQL_USER'' THEN '' WITH DEFAULT_SCHEMA = ''+QUOTENAME(U.default_schema_name)+'';''
		WHEN ''WINDOWS_GROUP'' THEN '';''
	END AS [-----GRANTING DB ACCESS TO USERS-----]
FROM sys.database_principals U
LEFT JOIN master.sys.server_principals L ON U.sid = L.sid
WHERE U.principal_id > 4 AND U.type_desc in (''SQL_USER'',''WINDOWS_USER'',''WINDOWS_GROUP'') AND L.sid IS NOT NULL
GO

-----------------------------------
----***CREATING DB ROLES***----
-----------------------------------

SELECT ''IF NOT EXISTS(SELECT * FROM sys.database_principals WHERE name =''''+name+'''')'' +CHAR(10)
	+CASE type_desc
		WHEN ''DATABASE_ROLE'' THEN ''CREATE ROLE ''+QUOTENAME(name)+'' AUTHORIZATION ''+QUOTENAME(USER_NAME(owning_principal_id))
		WHEN ''APPLICATION_ROLE'' THEN ''CREATE APPLICATION ROLE ''+QUOTENAME(name)+'' WITH PASSWORD = ''''xxxxxxxx'''', DEFAULT_SCHEMA = ''+QUOTENAME(default_schema_name)
	END AS [-----CREATING DB ROLES-----]
FROM sys.database_principals
WHERE name != ''public'' AND type_desc IN (''DATABASE_ROLE'',''APPLICATION_ROLE'') AND is_fixed_role <> 1


--***ADDING USERS TO DB ROLES***--
SELECT ''EXEC sp_addrolemember ''''+USER_NAME(role_principal_id)+'''',''''+USER_NAME(member_principal_id)+'''''' AS [-----ADDING USERS TO DB ROLES-----] 
FROM sys.database_role_members 
WHERE USER_NAME(member_principal_id) != ''dbo''
GO



-----------------------------------
--CREATE / BACKUP PERMISSIONS---
-----------------------------------



SELECT CASE state_desc
			WHEN ''DENY'' THEN ''DENY ''
			WHEN ''REVOKE'' THEN ''REVOKE ''
			WHEN ''GRANT'' THEN ''GRANT ''
			WHEN ''GRANT_WITH_GRANT_OPTION'' THEN ''GRANT ''
		END
+ permission_name + '' TO ''+ QUOTENAME(USER_NAME(grantee_principal_id))
+	CASE state_desc
			WHEN ''DENY'' THEN '';''
			WHEN ''REVOKE'' THEN '';''
			WHEN ''GRANT'' THEN '';''
			WHEN ''GRANT_WITH_GRANT_OPTION'' THEN '' WITH GRANT OPTION;''
	END AS [--CREATE / BACKUP PERMISSIONS---]
FROM sys.database_permissions
WHERE USER_NAME(grantee_principal_id) NOT IN (''dbo'',''INFORMATION_SCHEMA'',''sys'') AND OBJECT_NAME(major_id) IS NULL AND minor_id=0
GO

-----------------------------------
----OBJECT LEVEL PERMISSIONS----
-----------------------------------
SELECT CASE P.state_desc
			WHEN ''DENY'' THEN ''DENY ''
			WHEN ''REVOKE'' THEN ''REVOKE ''
			WHEN ''GRANT'' THEN ''GRANT ''
			WHEN ''GRANT_WITH_GRANT_OPTION'' THEN ''GRANT ''
		END
+ P.permission_name + '' ON '' +QUOTENAME(Schema_Name(O.schema_id))  COLLATE DATABASE_DEFAULT+''.''+QUOTENAME(OBJECT_NAME(P.major_id))  COLLATE DATABASE_DEFAULT
+ '' TO ''+QUOTENAME(USER_NAME(P.grantee_principal_id)) COLLATE DATABASE_DEFAULT
+	CASE P.state_desc
			WHEN ''DENY'' THEN '';''
			WHEN ''REVOKE'' THEN '';''
			WHEN ''GRANT'' THEN '';''
			WHEN ''GRANT_WITH_GRANT_OPTION'' THEN '' WITH GRANT OPTION;''
	END AS [----OBJECT LEVEL PERMISSIONS----]
FROM sys.database_permissions P
JOIN sys.objects O on O.object_id=P.major_id
WHERE P.major_id > 0 			--eliminating systemobjects
AND P.minor_id=0				--elininating column level permissions
GO

-----------------------------------
----COLUMN LEVEL PERMISSIONS----
-----------------------------------
SELECT CASE P.state_desc
			WHEN ''DENY'' THEN ''DENY ''
			WHEN ''REVOKE'' THEN ''REVOKE ''
			WHEN ''GRANT'' THEN ''GRANT ''
			WHEN ''GRANT_WITH_GRANT_OPTION'' THEN ''GRANT ''
		END
+ P.permission_name + '' ON '' +QUOTENAME(Schema_Name(O.schema_id)) COLLATE DATABASE_DEFAULT+''.''+QUOTENAME(OBJECT_NAME(P.major_id)) COLLATE DATABASE_DEFAULT
+''(''+COL_NAME(P.major_id,P.minor_id)+'')''
+ '' TO ''+QUOTENAME(USER_NAME(P.grantee_principal_id)) COLLATE DATABASE_DEFAULT
+	CASE P.state_desc
			WHEN ''DENY'' THEN '';''
			WHEN ''REVOKE'' THEN '';''
			WHEN ''GRANT'' THEN '';''
			WHEN ''GRANT_WITH_GRANT_OPTION'' THEN '' WITH GRANT OPTION;''
	END AS [----COLUMN LEVEL PERMISSIONS----]
FROM sys.database_permissions P
JOIN sys.objects O on O.object_id=P.major_id
WHERE P.minor_id > 0
GO
print ''--************************************************************************************************''



'
set @Initial =@Sizedb

	if @Sizedb like '%-%' 
	PRINT 'SET NOCOUNT OFF
go
use master'
	Else
	PRINT(@Command)
		
	

end
PRINT 'Select '''+(@Command1)+''''

Set Nocount off











