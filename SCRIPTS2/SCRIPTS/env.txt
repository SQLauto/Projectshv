/*
The reqs in automatic create a WO.. But we cant take those workorders... Only the pwop (Primary Work Order Person) can cate it in this moment is Brandon.. can you ask him.. he will decide if he make it or send it to us,,, (sorry its a new process)

*/---- usuaruios


xp_logininfo 'nord\x355'

xp_logininfo 'nord\Q8V0', 'all'

xp_logininfo 'nord\Dx0650_CosEvent_Prod_R', 'members'







lo9ki8ju7LO(KI*JU&


------------que esta corriendo 
SELECT command,s.text, start_time,
 Cast ((round(percent_complete,2)) as Varchar) 
 +' %'as Percent_Complete,CAST(((DATEDIFF(s,start_time,GetDate()))/3600) as varchar) 
 + ' hour(s), ' + CAST((DATEDIFF(s,start_time,GetDate())%3600)/60 as varchar) 
 + 'min, ' + CAST((DATEDIFF(s,start_time,GetDate())%60) as varchar) 
 + ' sec' as running_time, CAST((estimated_completion_time/3600000) as varchar) 
 + ' hour(s), ' + CAST((estimated_completion_time %3600000)/60000 as varchar) 
 + 'min, ' + CAST((estimated_completion_time %60000)/1000 as varchar) 
 + ' sec' as est_time_to_go, dateadd(second,estimated_completion_time/1000, 
 getdate()) as est_completion_time 
 FROM sys.dm_exec_requests r CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) s 
 WHERE r.command in ('RESTORE DATABASE', 'BACKUP DATABASE', 'RESTORE LOG', 'BACKUP LOG')




--huierfanos

EXEC sp_change_users_login 'Report'  DECLARE @UserName nvarchar(255) DECLARE orphanuser_cur cursor for SELECT UserName = name FROM sysusers WHERE issqluser = 1 and (sid is not null and sid <> 0x0) and suser_sname(sid) is null ORDER BY name OPEN orphanuser_cur FETCH NEXT FROM orphanuser_cur INTO @UserName  WHILE (@@fetch_status = 0) BEGIN PRINT @UserName + ' user name being resynced'  EXEC sp_change_users_login 'Update_one', @UserName, @UserName  FETCH NEXT FROM orphanuser_cur INTO @UserName END  CLOSE orphanuser_cur DEALLOCATE orphanuser_cur   EXEC sp_change_users_login 'Report' 

---------------victimas

select 
'Victim' as Blocker_type,Status,spid, Blocked,'Dbid: '+cast (dbid as varchar (20))+' - '+DB_NAME(dbid) as DBName, ('select '''+ Ltrim(str( spid, 5 )  )) +''' Event_Info'as SPID_Eventinfo,'Dbcc Inputbuffer ('+Ltrim(str( spid, 5 )  )+')' as Input_Spid,   
'Kill  '+Ltrim(str( spid, 5 )  )+' ' as [kill_Spid] , open_tran, hostname,   Program_name,cmd, loginame , login_time, last_batch      
from sys.sysprocesses
where blocked <> 0

union
select 
'Blocker' as Blocker_type,Status,spid, Blocked,'Dbid: '+cast (dbid as varchar (20))+' - '+DB_NAME(dbid) as DBName, ('select '''+ Ltrim(str( spid, 5 )  )) +'''Event_Info'as SPID_Eventinfo,'Dbcc Inputbuffer ('+Ltrim(str( spid, 5 )  )+')' as Input_Spid,   
 'Kill  '+Ltrim(str( spid, 5 )  )+' ' as [kill_Spid] , open_tran, hostname,   Program_name,cmd, loginame , login_time, last_batch      
from sys.sysprocesses
where blocked =0 and spid in (select blocked from sys.sysprocesses where blocked <> 0) Order by 1 
select   Status,count(Status) As count  from sys.sysprocesses where spid >51 GROUP by Status Order by 2 desc
select   Count(Status) As Count  from sys.sysprocesses where spid >51
select 
Status,spid, Blocked,'Dbid: '+cast (dbid as varchar (20))+' - '+DB_NAME(dbid) as DBName, ('select '''+ Ltrim(str( spid, 5 )  )) +''' Event_Info'as SPID_Eventinfo,'Dbcc Inputbuffer ('+Ltrim(str( spid, 5 )  )+')' as Input_Spid,   
'Kill  '+Ltrim(str( spid, 5 )  )+' ' as [kill_Spid] , open_tran, hostname,   Program_name,cmd, loginame , login_time, last_batch      
from sys.sysprocesses
where spid >51 order by spid

------------------crea back ups

IF OBJECT_ID('tempdb..#temp') IS NOT NULL  DROP TABLE #temp  create table #temp  ( name sysname ,db_size nvarchar(13) ,owner sysname ,dbid smallint ,created nvarchar(11) ,status nvarchar(600) ,compatibility_level tinyint )      insert into #temp exec sp_helpdb declare @database_Direction as varchar(590), @Direction_final varchar (max) Set @database_Direction= (Select top (1) physical_device_name      from msdb..backupset backupset left join msdb..backupmediafamily backupmediafamily On      backupmediafamily.media_set_id = backupset.media_set_id     where type in ('D') and  backupset.database_name = DB_NAME()     oRDER BY 1 DESC)set @Direction_final= REVERSE (@database_Direction) Set @Direction_final = (Select REVERSE(SUBSTRING(@Direction_final,  CHARINDEX('\', @Direction_final)+1, LEN(@Direction_final)))) +'\' select  'exec master.dbo.xp_backup_database @database='''+name+''',@filename='''+@Direction_final+''+name+'_Previous.bak''' as backup_Litespeed, 'BACKUP DATABASE ['+name+'] TO  DISK = N'''+@Direction_final+name+'_Previous.bak'' WITH  COPY_ONLY,  NAME = N''-Full Database Backup '+name+''',   STATS = 1'as backups_SQL from #temp where name like 

----------------------quiens oy


IF OBJECT_ID('tempdb..#tempTable') IS NOT NULL  DROP TABLE #tempTable DECLARE  @sqlver sql_variant,
@sqlver2 varchar(20), 
@sqlver3 varchar(20), 
@Name_sql varchar (max),
@Datestart datetime

CREATE TABLE #tempTable(
	LogDate DATETIME,
	ProcessInfo VARCHAR(252),
	Text VARCHAR(MAX))
 
INSERT INTO #tempTable

exec master..xp_ReadErrorLog 0, 1, 'Microsoft SQL Server'

Set @Datestart = (SELECT Logdate From #tempTable  Where text like 'Microsoft SQL Server%')


SELECT @sqlver = SERVERPROPERTY('productversion')
SELECT @sqlver2 = CAST(@sqlver AS varchar(20)) select @sqlver3 = CAST(SUBSTRING(@sqlver2,1,2)as varchar(20))
	IF @sqlver3 = '11' set @Name_sql= 'SQL 2012'
	IF @sqlver3 = '10' set @Name_sql= 'SQL 2008'
	IF @sqlver3 = '9.' set @Name_sql= 'SQL 2005'
	IF @sqlver3 ='8.' set @Name_sql= 'SQL 2000'
	IF @sqlver3 = '7.' set @Name_sql= 'SQL 7'

select system_user [User Loged],USer_name() [Permissions], @@SERVERNAME [Box],convert (datetime,@Datestart,7) as Started, convert(datetime,
(Getdate()-@Datestart),13)as UpTime ,
@@spid as Spid, 
@Name_sql [Type], @@VERSION [vers]  

----------------------------tamano base

Select  Round (Sum((cast (size as float)*8)/1024), 2) 	
SizeMB  , Round (Sum((cast (size as float)*8)/1024)*0.000976, 2)  
SizeGB  ,  Round (Sum((cast (size as float) *8)/1024)*0.000976  /1024, 2) SizeTB 

FROM sys.master_files WHERE DB_NAME(database_id) =

----------------------------

SELECT command,           s.text,            start_time,	    Cast ((round(percent_complete,2)) as Varchar) +' %'as Percent_Complete,             CAST(((DATEDIFF(s,start_time,GetDate()))/3600) as varchar) + ' hour(s), '                  + CAST((DATEDIFF(s,start_time,GetDate())%3600)/60 as varchar) + 'min, '                  + CAST((DATEDIFF(s,start_time,GetDate())%60) as varchar) + ' sec' as running_time,            CAST((estimated_completion_time/3600000) as varchar) + ' hour(s), '                  + CAST((estimated_completion_time %3600000)/60000 as varchar) + 'min, '                  + CAST((estimated_completion_time %60000)/1000 as varchar) + ' sec' as est_time_to_go,            dateadd(second,estimated_completion_time/1000, getdate()) as est_completion_time FROM sys.dm_exec_requests r CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) s WHERE r.command in ('RESTORE DATABASE', 'BACKUP DATABASE', 'RESTORE LOG', 'BACKUP LOG')

----------------------------backups ubicados

 Select	backup_start_date,backup_finish_date,database_name, physical_device_name, type, backup_size as backup_size, [user_name],database_creation_date,backupset.media_set_id from msdb..backupset backupset left join msdb..backupmediafamily backupmediafamily On backupmediafamily.media_set_id = backupset.media_set_id where type in ('D') and database_name =

----------------------------espacio en discos

IF OBJECT_ID('tempdb..#DF_Result') IS NOT NULL DROP TABLE #DF_Result   CREATE TABLE #DF_Result (Drive CHAR(1), MBFree INT  ) INSERT  INTO #DF_Result EXEC master..xp_fixeddrives ALTER TABLE #DF_Result ADD GBFree Float  NULL, TBFree Float Null Update #DF_Result sET GBFree=MBFree*0.000976  Update #DF_Result sET TBFree=GBFree*0.000976  Select Drive,MBFree,Round(GBFree, 2) as GBFree , Round(TBFree,2) as TBFree from #DF_Result DECLARE @database_name as varchar(190), @sqlver sql_variant, @sqlver2 varchar(20), @sqlver3 int, @Name_sql varchar (max) SELECT @sqlver = SERVERPROPERTY('productversion')SELECT @sqlver2 = CAST(@sqlver AS varchar(20)) select @sqlver3 = SUBSTRING(@sqlver2,1,1) IF @sqlver3 = 1 set @Name_sql= 'SQL 2008' IF @sqlver3 = 9 set @Name_sql= 'SQL 2005' IF @sqlver3 = 8 set @Name_sql= 'SQL 2000' BEGIN  IF @sqlver3 = 1 GOTO SERVER2008 IF @sqlver3 = 9 GOTO SERVER2000 IF @sqlver3 = 8 GOTO SERVER2000 GOTO THEEND END SERVER2008: declare @svrName varchar(255) declare @sql varchar(400) set @svrName = @@SERVERNAME set @sql = 'powershell.exe -c "Get-WmiObject -Class Win32_Volume -Filter ''DriveType = 3'' | select name,capacity,freespace | foreach{$_.name+''|''+$_.capacity/1048576+''%''+$_.freespace/1048576+''*''}"'  CREATE TABLE #output (line varchar(255))  insert #output EXEC xp_cmdshell @sql select rtrim(ltrim(SUBSTRING(line,1,CHARINDEX('|',line) -1))) as 'Drive' ,round(cast(rtrim(ltrim(SUBSTRING(line,CHARINDEX('%',line)+1, (CHARINDEX('*',line) -1)-CHARINDEX('%',line)) )) as Float) /1024 ,0)as 'Free_Space' ,round(cast(rtrim(ltrim(SUBSTRING(line,CHARINDEX('|',line)+1, (CHARINDEX('%',line) -1)-CHARINDEX('|',line)) )) as Float)/1024,0) as 'Total_Space' ,((round(cast(rtrim(ltrim(SUBSTRING(line,CHARINDEX('%',line)+1,(CHARINDEX('*',line) -1)-CHARINDEX('%',line)) )) as Float) /1024 ,0)) / (round(cast(rtrim(ltrim(SUBSTRING(line,CHARINDEX('|',line)+1,(CHARINDEX('%',line) -1)-CHARINDEX('|',line)) )) as Float)/1024,0)) * 100) as Percent_Free from #output where line like '[A-Z][:]%' order by drive drop table #output  GOTO THEEND SERVER2000: SET NOCOUNT ON; DECLARE @v_cmd nvarchar(255),@v_drive char(99) ,@v_sql nvarchar(255) ,@i int SELECT @v_cmd = 'fsutil volume diskfree %d%' SET @i = 1  CREATE TABLE #drives(iddrive smallint ,drive char(99)) CREATE TABLE #t(drive char(99),shellCmd nvarchar(500)); CREATE TABLE #total(drive char(99),freespace decimal(9,2), totalspace decimal(9,2)); INSERT #drives (drive) EXEC master..xp_cmdshell 'mountvol'DELETE #drives WHERE drive not like '%:\%' or drive is null WHILE (@i <= (SELECT count(drive) FROM #drives)) BEGIN UPDATE #drives  SET iddrive=@i WHERE drive = (SELECT TOP 1 drive FROM #drives WHERE iddrive IS NULL) SELECT @v_sql = REPLACE(@v_cmd,'%d%',LTRIM(RTRIM(drive))) from #drives where iddrive=@i INSERT #t(shellCmd)  EXEC master..xp_cmdshell @v_sql UPDATE #t  SET #t.drive = d.drive FROM #drives d WHERE #t.drive IS NULL and iddrive=@i SET @i = @i + 1 END INSERT INTO #total SELECT bb.drive,CAST(CAST(REPLACE(REPLACE(SUBSTRING(shellCmd,CHARINDEX(':',shellCmd)+1,LEN(shellCmd)),SPACE(1),SPACE(0)),char(13),SPACE(0)) AS NUMERIC(32,2))/1024/1024/1024 AS DECIMAL(9,2)) as freespace,tt.titi as total FROM #t bb JOIN (SELECT drive ,CAST(CAST(REPLACE(REPLACE(SUBSTRING(shellCmd,CHARINDEX(':',shellCmd)+1,LEN(shellCmd)),SPACE(1),SPACE(0)) ,char(13),SPACE(0)) AS NUMERIC(32,2))/1024/1024/1024 AS DECIMAL(9,2)) as titi FROM #t WHERE drive IS NOT NULL AND shellCmd NOT LIKE '%free bytes%') tt ON bb.drive = tt.drive WHERE bb.drive IS NOT NULL AND bb.shellCmd NOT LIKE '%avail free bytes%' AND bb.shellCmd LIKE '%free bytes%'; SELECT RTRIM(LTRIM(drive)) as Mount_Drives ,freespace as Free_Space ,totalspace as Total_Space ,CAST((freespace/totalspace * 100) AS DECIMAL(5,2)) as [Percent_Free] FROM #total ORDER BY drive DROP TABLE #drives DROP TABLE #t DROP TABLE #total THEEND: 


/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/



--Permissions_By_DBNames
set nocount on



IF OBJECT_ID('tempdb..#Mappings') IS NOT NULL  DROP TABLE #Mappings
CREATE TABLE #Mappings ( 
  IDX int NOT NULL IDENTITY (1, 1),
    DatabaseName sysname)
-----
INSERT INTO #Mappings (DatabaseName)values ('DBA')
INSERT INTO #Mappings (DatabaseName)values ('DBA_dev')
-----
  




Declare @Sizedb as Int,
		@Command as Varchar (8000),
		@Command1 as Varchar (100),
		@dbnm as varchar (500),
		@Initial As int,
		@Pass As int
		
		
Set @pass =0

Set @Initial =(Select Top(1) Idx from #Mappings order by IDx desc)

set @Command1='/*DBS Involved: '+(Select cast (Count(*)  as VArchar(3) )as A from #Mappings)+'
'
Print @Command1
Select DatabaseName as Names from #Mappings
print '*/'

--when you stop the shrunk
WHILE @Initial>=0

Begin

set @pass= @pass+1
Set @Sizedb=@Initial-1
Set @dbnm= (Select databasename from #Mappings where IDX=@pass)

-- command
Set @Command=--'----------------Pass# '+@dbnm+  cast (@pass as Varchar(30))+'----------'
'/*
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
-------------------------------------Script#'+  cast (@pass as Varchar(30))+' Db Name:'+Upper(@dbnm)+'-------------------------------------
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------*/

Set nocount on 
go

use '+@dbnm+'
go
SELECT ''USE ''+DB_NAME(dbid)+CHAR(10)+''GO'' FROM master..sysprocesses WHERE spid=@@SPID
-------------------------------------------
--***GRANTING DB ACCESS TO USERS***--
-------------------------------------------
SELECT ''IF NOT EXISTS(SELECT * FROM sys.database_principals WHERE name =''''+U.name+'''')''
+CHAR(10)+''CREATE USER ''+QUOTENAME(U.name)+'' FOR LOGIN ''+QUOTENAME(L.name COLLATE DATABASE_DEFAULT)
+	CASE U.type_desc
		WHEN ''WINDOWS_USER'' THEN '' WITH DEFAULT_SCHEMA = ''+QUOTENAME(U.default_schema_name)+'';''
		WHEN ''SQL_USER'' THEN '' WITH DEFAULT_SCHEMA = ''+QUOTENAME(U.default_schema_name)+'';''
		WHEN ''WINDOWS_GROUP'' THEN '';''
	END AS [-----GRANTING DB ACCESS TO USERS-----]
FROM sys.database_principals U
LEFT JOIN master.sys.server_principals L ON U.sid = L.sid
WHERE U.principal_id > 4 AND U.type_desc in (''SQL_USER'',''WINDOWS_USER'',''WINDOWS_GROUP'') AND L.sid IS NOT NULL
GO

-----------------------------------
----***CREATING DB ROLES***----
-----------------------------------

SELECT ''IF NOT EXISTS(SELECT * FROM sys.database_principals WHERE name =''''+name+'''')'' +CHAR(10)
	+CASE type_desc
		WHEN ''DATABASE_ROLE'' THEN ''CREATE ROLE ''+QUOTENAME(name)+'' AUTHORIZATION ''+QUOTENAME(USER_NAME(owning_principal_id))
		WHEN ''APPLICATION_ROLE'' THEN ''CREATE APPLICATION ROLE ''+QUOTENAME(name)+'' WITH PASSWORD = ''''xxxxxxxx'''', DEFAULT_SCHEMA = ''+QUOTENAME(default_schema_name)
	END AS [-----CREATING DB ROLES-----]
FROM sys.database_principals
WHERE name != ''public'' AND type_desc IN (''DATABASE_ROLE'',''APPLICATION_ROLE'') AND is_fixed_role <> 1


--***ADDING USERS TO DB ROLES***--
SELECT ''EXEC sp_addrolemember ''''+USER_NAME(role_principal_id)+'''',''''+USER_NAME(member_principal_id)+'''''' AS [-----ADDING USERS TO DB ROLES-----] 
FROM sys.database_role_members 
WHERE USER_NAME(member_principal_id) != ''dbo''
GO



-----------------------------------
--CREATE / BACKUP PERMISSIONS---
-----------------------------------



SELECT CASE state_desc
			WHEN ''DENY'' THEN ''DENY ''
			WHEN ''REVOKE'' THEN ''REVOKE ''
			WHEN ''GRANT'' THEN ''GRANT ''
			WHEN ''GRANT_WITH_GRANT_OPTION'' THEN ''GRANT ''
		END
+ permission_name + '' TO ''+ QUOTENAME(USER_NAME(grantee_principal_id))
+	CASE state_desc
			WHEN ''DENY'' THEN '';''
			WHEN ''REVOKE'' THEN '';''
			WHEN ''GRANT'' THEN '';''
			WHEN ''GRANT_WITH_GRANT_OPTION'' THEN '' WITH GRANT OPTION;''
	END AS [--CREATE / BACKUP PERMISSIONS---]
FROM sys.database_permissions
WHERE USER_NAME(grantee_principal_id) NOT IN (''dbo'',''INFORMATION_SCHEMA'',''sys'') AND OBJECT_NAME(major_id) IS NULL AND minor_id=0
GO

-----------------------------------
----OBJECT LEVEL PERMISSIONS----
-----------------------------------
SELECT CASE P.state_desc
			WHEN ''DENY'' THEN ''DENY ''
			WHEN ''REVOKE'' THEN ''REVOKE ''
			WHEN ''GRANT'' THEN ''GRANT ''
			WHEN ''GRANT_WITH_GRANT_OPTION'' THEN ''GRANT ''
		END
+ P.permission_name + '' ON '' +QUOTENAME(Schema_Name(O.schema_id))  COLLATE DATABASE_DEFAULT+''.''+QUOTENAME(OBJECT_NAME(P.major_id))  COLLATE DATABASE_DEFAULT
+ '' TO ''+QUOTENAME(USER_NAME(P.grantee_principal_id)) COLLATE DATABASE_DEFAULT
+	CASE P.state_desc
			WHEN ''DENY'' THEN '';''
			WHEN ''REVOKE'' THEN '';''
			WHEN ''GRANT'' THEN '';''
			WHEN ''GRANT_WITH_GRANT_OPTION'' THEN '' WITH GRANT OPTION;''
	END AS [----OBJECT LEVEL PERMISSIONS----]
FROM sys.database_permissions P
JOIN sys.objects O on O.object_id=P.major_id
WHERE P.major_id > 0 			--eliminating systemobjects
AND P.minor_id=0				--elininating column level permissions
GO

-----------------------------------
----COLUMN LEVEL PERMISSIONS----
-----------------------------------
SELECT CASE P.state_desc
			WHEN ''DENY'' THEN ''DENY ''
			WHEN ''REVOKE'' THEN ''REVOKE ''
			WHEN ''GRANT'' THEN ''GRANT ''
			WHEN ''GRANT_WITH_GRANT_OPTION'' THEN ''GRANT ''
		END
+ P.permission_name + '' ON '' +QUOTENAME(Schema_Name(O.schema_id)) COLLATE DATABASE_DEFAULT+''.''+QUOTENAME(OBJECT_NAME(P.major_id)) COLLATE DATABASE_DEFAULT
+''(''+COL_NAME(P.major_id,P.minor_id)+'')''
+ '' TO ''+QUOTENAME(USER_NAME(P.grantee_principal_id)) COLLATE DATABASE_DEFAULT
+	CASE P.state_desc
			WHEN ''DENY'' THEN '';''
			WHEN ''REVOKE'' THEN '';''
			WHEN ''GRANT'' THEN '';''
			WHEN ''GRANT_WITH_GRANT_OPTION'' THEN '' WITH GRANT OPTION;''
	END AS [----COLUMN LEVEL PERMISSIONS----]
FROM sys.database_permissions P
JOIN sys.objects O on O.object_id=P.major_id
WHERE P.minor_id > 0
GO
print ''--**********************************************************************************************************************************''
print ''--**********************************************************************************************************************************''
print ''--**********************************************************************************************************************************''
'

set @Initial =@Sizedb

	if @Sizedb like '%-%' 
	PRINT 'SET NOCOUNT OFF
go
use master'
	Else
	PRINT(@Command)
		
	

end
print '-->>>>>>>>>>>>>>>>>>>>>>>End Of file<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<'


Set Nocount off





/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
--Perms on multiple DBs--
use HotDocs
go



SET NOCOUNT ON




create table #temp_perms  
( Line datetime 
,name text --varchar(8000)
 )      
 
 --drop table #temp_perms
 
 
-- select * from #temp_perms







------------CREATE TABLE #temp_perms
------------	(
------------	Line int NOT NULL,
------------	chat text NULL
------------	)  ON [PRIMARY]
------------	 TEXTIMAGE_ON [PRIMARY]
------------GO
------------ALTER TABLE #temp_perms ADD CONSTRAINT
------------	idx PRIMARY KEY CLUSTERED 
------------	(
------------	Line
------------	) WITH( PAD_INDEX = OFF, FILLFACTOR = 1, 
------------	STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF,
------------	 ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

------------GO
------------ALTER TABLE #temp_perms SET (LOCK_ESCALATION = TABLE)
------------GO

--drop table #temp_perms
 




























Insert into #temp_perms
values (GETDATE(), (SELECT 'USE '+DB_NAME(dbid)+CHAR(10)+'GO' FROM master..sysprocesses WHERE spid=@@SPID))


--Select name from #temp_perms


Insert into #temp_perms
values (GETDATE(),'-------------') 



---
SELECT 'IF NOT EXISTS(SELECT * FROM sys.database_principals WHERE name ='''+U.name+''')'
+CHAR(10)+'CREATE USER '+QUOTENAME(U.name)+' FOR LOGIN '+QUOTENAME(L.name COLLATE DATABASE_DEFAULT)
+	CASE U.type_desc
		WHEN 'WINDOWS_USER' THEN ' WITH DEFAULT_SCHEMA = '+QUOTENAME(U.default_schema_name)+';'
		WHEN 'SQL_USER' THEN ' WITH DEFAULT_SCHEMA = '+QUOTENAME(U.default_schema_name)+';'
		WHEN 'WINDOWS_GROUP' THEN ';'
	END AS [-----GRANTING DB ACCESS TO USERS-----]
FROM sys.database_principals U
LEFT JOIN master.sys.server_principals L ON U.sid = L.sid
WHERE U.principal_id > 4 AND U.type_desc in ('SQL_USER','WINDOWS_USER','WINDOWS_GROUP') AND L.sid IS NOT NULL
GO


SELECT 'IF NOT EXISTS(SELECT * FROM sys.database_principals WHERE name ='''+name+''')' +CHAR(10)
	+CASE type_desc
		WHEN 'DATABASE_ROLE' THEN 'CREATE ROLE '+QUOTENAME(name)+' AUTHORIZATION '+QUOTENAME(USER_NAME(owning_principal_id))
		WHEN 'APPLICATION_ROLE' THEN 'CREATE APPLICATION ROLE '+QUOTENAME(name)+' WITH PASSWORD = ''xxxxxxxx'', DEFAULT_SCHEMA = '+QUOTENAME(default_schema_name)
	END AS [-----CREATING DB ROLES-----]
FROM sys.database_principals
WHERE name != 'public' AND type_desc IN ('DATABASE_ROLE','APPLICATION_ROLE') AND is_fixed_role <> 1



SELECT 'EXEC sp_addrolemember '''+USER_NAME(role_principal_id)+''','''+USER_NAME(member_principal_id)+'''' AS [-----ADDING USERS TO DB ROLES-----] 
FROM sys.database_role_members 
WHERE USER_NAME(member_principal_id) != 'dbo'
GO




SELECT CASE state_desc
			WHEN 'DENY' THEN 'DENY '
			WHEN 'REVOKE' THEN 'REVOKE '
			WHEN 'GRANT' THEN 'GRANT '
			WHEN 'GRANT_WITH_GRANT_OPTION' THEN 'GRANT '
		END
+ permission_name + ' TO '+ QUOTENAME(USER_NAME(grantee_principal_id))
+	CASE state_desc
			WHEN 'DENY' THEN ';'
			WHEN 'REVOKE' THEN ';'
			WHEN 'GRANT' THEN ';'
			WHEN 'GRANT_WITH_GRANT_OPTION' THEN ' WITH GRANT OPTION;'
	END AS [--CREATE / BACKUP PERMISSIONS---]
FROM sys.database_permissions
WHERE USER_NAME(grantee_principal_id) NOT IN ('dbo','INFORMATION_SCHEMA','sys') AND OBJECT_NAME(major_id) IS NULL AND minor_id=0
GO


SELECT CASE P.state_desc
			WHEN 'DENY' THEN 'DENY '
			WHEN 'REVOKE' THEN 'REVOKE '
			WHEN 'GRANT' THEN 'GRANT '
			WHEN 'GRANT_WITH_GRANT_OPTION' THEN 'GRANT '
		END
+ P.permission_name + ' ON ' +QUOTENAME(Schema_Name(O.schema_id))  COLLATE DATABASE_DEFAULT+'.'+QUOTENAME(OBJECT_NAME(P.major_id))  COLLATE DATABASE_DEFAULT
+ ' TO '+QUOTENAME(USER_NAME(P.grantee_principal_id)) COLLATE DATABASE_DEFAULT
+	CASE P.state_desc
			WHEN 'DENY' THEN ';'
			WHEN 'REVOKE' THEN ';'
			WHEN 'GRANT' THEN ';'
			WHEN 'GRANT_WITH_GRANT_OPTION' THEN ' WITH GRANT OPTION;'
	END AS [----OBJECT LEVEL PERMISSIONS----]
FROM sys.database_permissions P
JOIN sys.objects O on O.object_id=P.major_id
WHERE P.major_id > 0 			--eliminating systemobjects
AND P.minor_id=0				--elininating column level permissions
GO


SELECT CASE P.state_desc
			WHEN 'DENY' THEN 'DENY '
			WHEN 'REVOKE' THEN 'REVOKE '
			WHEN 'GRANT' THEN 'GRANT '
			WHEN 'GRANT_WITH_GRANT_OPTION' THEN 'GRANT '
		END
+ P.permission_name + ' ON ' +QUOTENAME(Schema_Name(O.schema_id)) COLLATE DATABASE_DEFAULT+'.'+QUOTENAME(OBJECT_NAME(P.major_id)) COLLATE DATABASE_DEFAULT
+'('+COL_NAME(P.major_id,P.minor_id)+')'
+ ' TO '+QUOTENAME(USER_NAME(P.grantee_principal_id)) COLLATE DATABASE_DEFAULT
+	CASE P.state_desc
			WHEN 'DENY' THEN ';'
			WHEN 'REVOKE' THEN ';'
			WHEN 'GRANT' THEN ';'
			WHEN 'GRANT_WITH_GRANT_OPTION' THEN ' WITH GRANT OPTION;'
	END AS [----COLUMN LEVEL PERMISSIONS----]
FROM sys.database_permissions P
JOIN sys.objects O on O.object_id=P.major_id
WHERE P.minor_id > 0
GO


SET NOCOUNT OFF



/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
set nocount on
/* Cuales tienen mas para probar
BY Carlos Elizondo





CREATE TABLE #temporal ( 
    LoginName nvarchar(max), 
    DBname nvarchar(max), 
    Username nvarchar(max), 
    AliasName nvarchar(max) 
)  
INSERT INTO #temporal 
EXEC master..sp_msloginmappings 
-- display results 


SELECT loginname, count(loginname) as DB_Involved FROM   #temporal 
group by loginname 
order by count(loginname) desc 

*/


IF OBJECT_ID('tempdb..#temporal') IS NOT NULL  DROP TABLE #temporal  
IF OBJECT_ID('tempdb..#output') IS NOT NULL  DROP TABLE #output  
IF OBJECT_ID('tempdb..#Mappings') IS NOT NULL  DROP TABLE #Mappings

go

            DECLARE @name sysname,
             @type varchar (1),
             @LoginName sysname,
             @hasaccess int,
             @denylogin int,
             @is_disabled int,
             @PWD_varbinary  varbinary (256),
             @PWD_string  varchar (514),
             @SID_varbinary varbinary (85),
             @SID_string varchar (514),
             @tmpstr  varchar (1024),
             @is_policy_checked varchar (3),
             @is_expiration_checked varchar (3),
			 @DatabaseName sysname,
			 @SQL NVARCHAR(4000),
			 @sid VARCHAR(255),
             @defaultdb sysname,
			 @Sizedb as Int,
			 @Command as Varchar (8000),
			 @Command1 as Varchar (8000),
			 @Command3 as Varchar (3),
			 @Command2 as Varchar (8000),			 
			 @Initial As int,
			 @Pass As int             
/*--------------------------------------------------------------------
----------------------------------------------------------------------*/             
SET @LoginName = 'regfed_link_dev'
/*--------------------------------------------------------------------
----------------------------------------------------------------------*/             

            Create Table #output 
                (
                    id int IDENTITY(1,1),
                    cmd varchar(8000)
                )


            IF (@LoginName IS NULL)
              DECLARE login_curs CURSOR FOR

                  SELECT p.sid, p.name, p.type, p.is_disabled, p.default_database_name, l.hasaccess, l.denylogin FROM 
            sys.server_principals p LEFT JOIN sys.syslogins l
                  ON ( l.name = p.name ) WHERE p.type IN ( 'S', 'G', 'U' ) AND p.name <> 'sa'
            ELSE
              DECLARE login_curs CURSOR FOR


                  SELECT p.sid, p.name, p.type, p.is_disabled, p.default_database_name, l.hasaccess, l.denylogin FROM 
            sys.server_principals p LEFT JOIN sys.syslogins l
                  ON ( l.name = p.name ) WHERE p.type IN ( 'S', 'G', 'U' ) AND p.name = @LoginName
            OPEN login_curs

            FETCH NEXT FROM login_curs INTO @SID_varbinary, @name, @type, @is_disabled, @defaultdb, @hasaccess, @denylogin
            IF (@@fetch_status = -1)

            SET @tmpstr = ''
            PRINT @tmpstr
            SET @tmpstr = ''
            PRINT @tmpstr
            PRINT ''
            WHILE (@@fetch_status <> -1)
            BEGIN
              IF (@@fetch_status <> -2)
              BEGIN
  

                IF (@type IN ( 'G', 'U'))
                BEGIN -- NT authenticated account/group

                  SET @tmpstr = '--CREATE LOGIN ' + QUOTENAME( @name ) + ' FROM WINDOWS WITH DEFAULT_DATABASE = [' + @defaultdb + ']'

                END
                ELSE BEGIN -- SQL Server authentication
                    -- obtain password and sid
                        SET @PWD_varbinary = CAST( LOGINPROPERTY( @name, 'PasswordHash' ) AS varbinary (256) )
                    EXEC sp_hexadecimal @PWD_varbinary, @PWD_string OUT
                    EXEC sp_hexadecimal @SID_varbinary,@SID_string OUT

                    -- obtain password policy state
                    SELECT @is_policy_checked = CASE is_policy_checked WHEN 1 THEN 'ON' WHEN 0 THEN 'OFF' ELSE NULL END FROM sys.sql_logins WHERE name = @name
                    SELECT @is_expiration_checked = CASE is_expiration_checked WHEN 1 THEN 'ON' WHEN 0 THEN 'OFF' ELSE NULL END FROM sys.sql_logins WHERE name = @name

                        SET @tmpstr = '--CREATE LOGIN ' + QUOTENAME( @name ) + ' WITH PASSWORD = ' + @PWD_string + ' HASHED, SID = ' + @SID_string + ', DEFAULT_DATABASE = [' + @defaultdb + ']'
                    IF ( @is_policy_checked IS NOT NULL )
                    BEGIN
                      SET @tmpstr = @tmpstr + ', CHECK_POLICY = ' + @is_policy_checked
                    END
                    IF ( @is_expiration_checked IS NOT NULL )
                    BEGIN
                      SET @tmpstr = @tmpstr + ', CHECK_EXPIRATION = ' + @is_expiration_checked
                    END
                END
                IF (@denylogin = 1)
                BEGIN -- login is denied access
                  SET @tmpstr = @tmpstr + '; DENY CONNECT SQL TO ' + QUOTENAME( @name )
                END
                ELSE IF (@hasaccess = 0)
                BEGIN -- login exists but does not have access
                  SET @tmpstr = @tmpstr + '; REVOKE CONNECT SQL TO ' + QUOTENAME( @name )
                END
                IF (@is_disabled = 1)
                BEGIN -- login is disabled
                  SET @tmpstr = @tmpstr + '; ALTER LOGIN ' + QUOTENAME( @name ) + ' DISABLE'
                END
                --PRINT @tmpstr
                insert into  #output  (cmd) values (@tmpstr)
              END

              FETCH NEXT FROM login_curs INTO @SID_varbinary, @name, @type, @is_disabled, @defaultdb, @hasaccess, @denylogin
               END
            CLOSE login_curs
            DEALLOCATE login_curs
--select '/*-------HASH PASS-----'+ cmd +'*/' from  #output 
  Set @Command1=(select '/*-------HASH PASS-----'+ cmd +'*/' from  #output )
----------------------Filtrer--------------------------------------------------




SET @sid = (SELECT sid FROM sys.server_principals WHERE [name] = @LoginName)

CREATE TABLE #Mappings ( 
  DatabaseName sysname, 
  UserName sysname)

DECLARE cursDatabases CURSOR FAST_FORWARD FOR SELECT name FROM sys.databases

OPEN cursDatabases

FETCH NEXT FROM cursDatabases INTO @DatabaseName

WHILE (@@FETCH_STATUS = 0) 
BEGIN 
   SET @SQL = 'INSERT INTO #Mappings (DatabaseName, UserName) 
             SELECT ''' + @DatabaseName + ''', name 
             FROM [' + @DatabaseName + '].sys.database_principals 
             WHERE sid = ''' + @sid + ''';'; 
                 
   EXEC(@SQL)
    
   FETCH NEXT FROM cursDatabases INTO @DatabaseName
END 

CLOSE cursDatabases
DEALLOCATE cursDatabases

 -----------Add index----------------------
ALTER TABLE #Mappings 
  ADD 
indice int NOT NULL IDENTITY (1, 1)

  
--SELECT Indice,databasename  FROM #Mappings  


  Set @Command1=(select '/*-------HASH PASS-----'+ cmd +'' from  #output )

set @Command2='DBS: '+(Select cast (Count(*)  as VArchar(3) )as A from #Mappings)+'
'
set @Command3='*/'
--------------loop-------------------------

print @Command1
Print @Command2

Select DatabaseName Names from #Mappings
Print @Command3

---- Pass
Set @pass =0
Set @Initial = (Select Top(1) indice from #Mappings order by indice desc )

--when you stop the do
WHILE @Initial>=0

Begin
--set the counter
set @pass= @pass+1
Set @Sizedb=@Initial-1

Declare @dbnm as varchar (500)
Set @dbnm= (Select databasename from #Mappings where Indice=@pass)

-- command script permissions

Set @Command='/*
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
-------------------------------------Script#'+  cast (@pass as Varchar(30))+' Db Name:'+Upper(@dbnm)+'-------------------------------------
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------*/

Set nocount on 
go

use '+@dbnm+'
go
SELECT ''USE ''+DB_NAME(dbid)+CHAR(10)+''GO'' FROM master..sysprocesses WHERE spid=@@SPID
-------------------------------------------
--***GRANTING DB ACCESS TO USERS***--
-------------------------------------------
SELECT ''IF NOT EXISTS(SELECT * FROM sys.database_principals WHERE name =''''+U.name+'''')''
+CHAR(10)+''CREATE USER ''+QUOTENAME(U.name)+'' FOR LOGIN ''+QUOTENAME(L.name COLLATE DATABASE_DEFAULT)
+	CASE U.type_desc
		WHEN ''WINDOWS_USER'' THEN '' WITH DEFAULT_SCHEMA = ''+QUOTENAME(U.default_schema_name)+'';''
		WHEN ''SQL_USER'' THEN '' WITH DEFAULT_SCHEMA = ''+QUOTENAME(U.default_schema_name)+'';''
		WHEN ''WINDOWS_GROUP'' THEN '';''
	END AS [-----GRANTING DB ACCESS TO USERS-----]
FROM sys.database_principals U
LEFT JOIN master.sys.server_principals L ON U.sid = L.sid
WHERE U.principal_id > 4 AND U.type_desc in (''SQL_USER'',''WINDOWS_USER'',''WINDOWS_GROUP'') AND L.sid IS NOT NULL
GO

-----------------------------------
----***CREATING DB ROLES***----
-----------------------------------

SELECT ''IF NOT EXISTS(SELECT * FROM sys.database_principals WHERE name =''''+name+'''')'' +CHAR(10)
	+CASE type_desc
		WHEN ''DATABASE_ROLE'' THEN ''CREATE ROLE ''+QUOTENAME(name)+'' AUTHORIZATION ''+QUOTENAME(USER_NAME(owning_principal_id))
		WHEN ''APPLICATION_ROLE'' THEN ''CREATE APPLICATION ROLE ''+QUOTENAME(name)+'' WITH PASSWORD = ''''xxxxxxxx'''', DEFAULT_SCHEMA = ''+QUOTENAME(default_schema_name)
	END AS [-----CREATING DB ROLES-----]
FROM sys.database_principals
WHERE name != ''public'' AND type_desc IN (''DATABASE_ROLE'',''APPLICATION_ROLE'') AND is_fixed_role <> 1


--***ADDING USERS TO DB ROLES***--
SELECT ''EXEC sp_addrolemember ''''+USER_NAME(role_principal_id)+'''',''''+USER_NAME(member_principal_id)+'''''' AS [-----ADDING USERS TO DB ROLES-----] 
FROM sys.database_role_members 
WHERE USER_NAME(member_principal_id) != ''dbo''
GO



-----------------------------------
--CREATE / BACKUP PERMISSIONS---
-----------------------------------



SELECT CASE state_desc
			WHEN ''DENY'' THEN ''DENY ''
			WHEN ''REVOKE'' THEN ''REVOKE ''
			WHEN ''GRANT'' THEN ''GRANT ''
			WHEN ''GRANT_WITH_GRANT_OPTION'' THEN ''GRANT ''
		END
+ permission_name + '' TO ''+ QUOTENAME(USER_NAME(grantee_principal_id))
+	CASE state_desc
			WHEN ''DENY'' THEN '';''
			WHEN ''REVOKE'' THEN '';''
			WHEN ''GRANT'' THEN '';''
			WHEN ''GRANT_WITH_GRANT_OPTION'' THEN '' WITH GRANT OPTION;''
	END AS [--CREATE / BACKUP PERMISSIONS---]
FROM sys.database_permissions
WHERE USER_NAME(grantee_principal_id) NOT IN (''dbo'',''INFORMATION_SCHEMA'',''sys'') AND OBJECT_NAME(major_id) IS NULL AND minor_id=0
GO

-----------------------------------
----OBJECT LEVEL PERMISSIONS----
-----------------------------------
SELECT CASE P.state_desc
			WHEN ''DENY'' THEN ''DENY ''
			WHEN ''REVOKE'' THEN ''REVOKE ''
			WHEN ''GRANT'' THEN ''GRANT ''
			WHEN ''GRANT_WITH_GRANT_OPTION'' THEN ''GRANT ''
		END
+ P.permission_name + '' ON '' +QUOTENAME(Schema_Name(O.schema_id))  COLLATE DATABASE_DEFAULT+''.''+QUOTENAME(OBJECT_NAME(P.major_id))  COLLATE DATABASE_DEFAULT
+ '' TO ''+QUOTENAME(USER_NAME(P.grantee_principal_id)) COLLATE DATABASE_DEFAULT
+	CASE P.state_desc
			WHEN ''DENY'' THEN '';''
			WHEN ''REVOKE'' THEN '';''
			WHEN ''GRANT'' THEN '';''
			WHEN ''GRANT_WITH_GRANT_OPTION'' THEN '' WITH GRANT OPTION;''
	END AS [----OBJECT LEVEL PERMISSIONS----]
FROM sys.database_permissions P
JOIN sys.objects O on O.object_id=P.major_id
WHERE P.major_id > 0 			--eliminating systemobjects
AND P.minor_id=0				--elininating column level permissions
GO

-----------------------------------
----COLUMN LEVEL PERMISSIONS----
-----------------------------------
SELECT CASE P.state_desc
			WHEN ''DENY'' THEN ''DENY ''
			WHEN ''REVOKE'' THEN ''REVOKE ''
			WHEN ''GRANT'' THEN ''GRANT ''
			WHEN ''GRANT_WITH_GRANT_OPTION'' THEN ''GRANT ''
		END
+ P.permission_name + '' ON '' +QUOTENAME(Schema_Name(O.schema_id)) COLLATE DATABASE_DEFAULT+''.''+QUOTENAME(OBJECT_NAME(P.major_id)) COLLATE DATABASE_DEFAULT
+''(''+COL_NAME(P.major_id,P.minor_id)+'')''
+ '' TO ''+QUOTENAME(USER_NAME(P.grantee_principal_id)) COLLATE DATABASE_DEFAULT
+	CASE P.state_desc
			WHEN ''DENY'' THEN '';''
			WHEN ''REVOKE'' THEN '';''
			WHEN ''GRANT'' THEN '';''
			WHEN ''GRANT_WITH_GRANT_OPTION'' THEN '' WITH GRANT OPTION;''
	END AS [----COLUMN LEVEL PERMISSIONS----]
FROM sys.database_permissions P
JOIN sys.objects O on O.object_id=P.major_id
WHERE P.minor_id > 0
GO
print ''--************************************************************************************************''



'
set @Initial =@Sizedb

	if @Sizedb like '%-%' 
	PRINT 'SET NOCOUNT OFF
go
use master'
	Else
	PRINT(@Command)
		
	

end
PRINT 'Select '''+(@Command1)+''''

Set Nocount off













/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
--Decript


--to decript:


---Log in the server as Admin:servername
---


---DROP PROC dbo.ObjectEncryption

CREATE PROCEDURE dbo.ObjectEncryption 
@object_name NVARCHAR(MAX) WITH ENCRYPTION
AS
BEGIN  
DECLARE @secret VARBINARY(MAX);  
DECLARE @known_encrypted VARBINARY(MAX);  
DECLARE @known_plain VARBINARY(MAX);  
DECLARE @object_type NVARCHAR(MAX);   


SELECT  @secret = imageval  
FROM    sys.sysobjvalues  
WHERE   objid = OBJECT_ID(@object_name);   

DECLARE @cmd NVARCHAR(MAX);  
SELECT  @cmd = CASE type_desc 
				WHEN 'SQL_SCALAR_FUNCTION'
					THEN 'ALTER FUNCTION ' + @object_name + '()RETURNS INT WITH ENCRYPTION AS BEGIN RETURN 0;END;'
				WHEN 'SQL_TABLE_VALUED_FUNCTION'
					THEN 'ALTER FUNCTION ' + @object_name + '()RETURNS @r TABLE(i INT) WITH ENCRYPTION AS BEGIN RETURN END;'
				WHEN 'SQL_INLINE_TABLE_VALUED_FUNCTION'
					THEN 'ALTER FUNCTION ' + @object_name + '()RETURNS TABLE WITH ENCRYPTION AS RETURN SELECT 0 i;'
				WHEN 'SQL_STORED_PROCEDURE'
					THEN 'ALTER PROCEDURE ' + @object_name + ' WITH ENCRYPTION AS RETURN 0;'                  
			   END  
FROM    sys.objects  
WHERE   object_id = OBJECT_ID(@object_name);   

SELECT  @cmd = REPLICATE(CAST(CHAR(32) AS NVARCHAR(MAX)), DATALENGTH(@secret)) + @cmd;   

SELECT  @known_plain = CAST(@cmd AS VARBINARY(MAX));   

BEGIN TRAN;    
	EXEC(@cmd);    
	SELECT  @known_encrypted = imageval    
	FROM    sys.sysobjvalues    
	WHERE   objid = OBJECT_ID(@object_name);  
ROLLBACK;    

DECLARE @i INT = 0;  
DECLARE @plain VARBINARY(MAX) = 0x;   

WHILE @i < DATALENGTH(@secret)     
BEGIN      
	SET @plain = @plain        
		+ CAST(REVERSE(CAST(CAST(SUBSTRING(@secret, @i, 2) AS SMALLINT)
		^ CAST(SUBSTRING(@known_plain, @i, 2) AS SMALLINT)
		^ CAST(SUBSTRING(@known_encrypted, @i, 2) AS SMALLINT) AS BINARY(2))) AS BINARY(2));
	SET @i += 2;    
END   

SET @cmd = N'SELECT  (SELECT ''--''+CHAR(13)+CHAR(10)+''GO''+CHAR(13)+CHAR(10)+'
			+ N'CAST(@plain AS NVARCHAR(MAX))+CHAR(13)+CHAR(10)+''GO''+CHAR(13)+CHAR(10)+''--'''
			+ N' AS [processing-instruction(sql)] FOR XML PATH(''''),TYPE) AS [object_definition for '
			+ REPLACE(@object_name, ']', ']]') + ']';  
EXEC sp_executesql @cmd, N'@plain VARBINARY(MAX)', @plain;
END;



/*test
---DROP PROC dbo.EncGetDate  
CREATE PROCEDURE dbo.EncGetDate  WITH ENCRYPTION
AS
BEGIN 
	Select GETDATE()
END

- dbo.ecris_table_prepare 
- dbo.ecris_view_repoint 

exec sp_helptext EncGetDate  
---error

ObjectEncryption 'EncGetDate'
-- works



*/
----



/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
**sp_whos
select 
spid, Blocked,'Dbid: '+cast (dbid as varchar (20))+' - '+DB_NAME(dbid) as DBName, 'Dbcc Inputbuffer ('+Ltrim(str( spid, 5 )  )+')' as Input_Spid,   
'Kill  '+Ltrim(str( spid, 5 )  )+' ' as [kill_Spid] , open_tran, ltrim(rtrim(hostname))hostname ,    ltrim(rtrim(Program_name))Program_name,ltrim(rtrim(cmd))cmd, ltrim(rtrim(loginame))loginame , login_time, last_batch      
from sys.sysprocesses
--where loginame like '%%'
--where  Hostname like '%%'
--Where db_name like '%%'
--where program_name like '%%'
--where cmd like '%%'







DECLARE @sqltext VARBINARY(128)
 SELECT @sqltext = sql_handle
 FROM sys.sysprocesses
 WHERE spid = 61
 SELECT TEXT
 FROM sys.dm_exec_sql_text(@sqltext)
 GO


DECLARE @sqltext VARBINARY(128)
 SELECT @sqltext = sql_handle
 FROM sys.sysprocesses
 WHERE spid = 61
 SELECT TEXT
 FROM ::fn_get_sql(@sqltext)
 GO 

/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
--traces
Select * from ::fn_trace_getinfo(default)


/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
--mis grupos


 xp_logininfo 'CORP\f3O7E'
 go





/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
--space
if exists( Select * from tempdb.dbo.sysobjects where id = object_id(N'tempdb.dbo.##DbFilesInventory') )
	drop table ##DbFilesInventory

Create table ##DbFilesInventory (DbName sysname, DBFileId int, LogicalName sysname, physical_name varchar(500), sizeMB float, usedMB float)

exec sp_msforeachdb 'USE [?];
insert into ##DbFilesInventory
SELECT DB_NAME(database_id),
s.file_id AS [ID],
s.name AS [Name],
s.physical_name AS [FileName],
Round(s.size /128.0,2) AS [SizeMB],
Round(CAST(FILEPROPERTY(s.name, ''SpaceUsed'') AS float)/128.0,2) AS [UsedSpace]
FROM sys.master_files AS s 
WHERE s.database_id = db_id()
ORDER BY [ID] ASC' 


Select *,sizeMB-usedMB as [FreeMB] , 
FreeGBs = Round((sizeMB-usedMB) / 1024.0,2),
Round(((sizeMB-usedMB) /  SizeMB) * 100,2) as [Pct Free]  --usedMB                 
, +Char(13)+'Use [' +DbName+']
Go '+Char(13)+'DBCC SHRINKFILE (N'''+LogicalName+''',0,TRUNCATEONLY)'+Char(13)+' 
GO '+Char(13)+Char(13)+Char(13) as Sentence  from ##DbFilesInventory 
--where physical_name like 'J:%'
Order by [FreeMB]desc


--//or

Select  'Use [' +DbName+'] 
Go '+Char(13)+'DBCC SHRINKFILE (N'''+LogicalName+''',0,TRUNCATEONLY)'+Char(13)+'GO'+Char(13)
as Sentence  from ##DbFilesInventory
--where physical_name like 'J:%'


/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
--idx
use CORE 
go
SELECT ps.database_id, ps.OBJECT_ID,OBJECT_NAME(ps.OBJECT_ID) Obj_Name,
ps.index_id, b.name,
ps.avg_fragmentation_in_percent
FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL, NULL, NULL) AS ps
INNER JOIN sys.indexes AS b ON ps.OBJECT_ID = b.OBJECT_ID
AND ps.index_id = b.index_id
WHERE ps.database_id =   DB_ID()
ORDER BY ps.OBJECT_ID  





use REPORTING
go

SELECT ps.database_id, ps.OBJECT_ID,OBJECT_NAME(ps.OBJECT_ID) Obj_Name,
ps.index_id, b.name,
ps.avg_fragmentation_in_percent
FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL, NULL, NULL) AS ps
INNER JOIN sys.indexes AS b ON ps.OBJECT_ID = b.OBJECT_ID
AND ps.index_id = b.index_id
WHERE ps.database_id =   DB_ID()
ORDER BY ps.OBJECT_ID  



/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/

--traces
Select * from ::fn_trace_getinfo(default)

/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
--cicle
declare @NumErrorLogs int 
exec master.dbo.xp_instance_regread N'HKEY_LOCAL_MACHINE', 
N'Software\Microsoft\MSSQLServer\MSSQLServer', 
N'NumErrorLogs', 
@NumErrorLogs OUTPUT 
SELECT @NumErrorLogs

/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
--read errorlog filter

DECLARE @logs TABLE
(
LogDate DATETIME,
ProcessInfo VARCHAR(252),
Text VARCHAR(MAX)
)
 
INSERT INTO @logs
EXEC sp_readerrorlog
 
 
--INSERT INTO @logs
--EXEC sp_readerrorlog 1
 
 
SELECT * 
		Into #Temp 
FROM @logs 
		select * from #Temp
Where text like '%logi%'

		drop table #Temp
GO


ooo
-------------


CREATE TABLE #tempTable(
	LogDate DATETIME,
	ProcessInfo VARCHAR(252),
	Text VARCHAR(MAX))

 
INSERT INTO #tempTable
EXEC sp_readerrorlog
 
 
--INSERT INTO @logs
--EXEC sp_readerrorlog 1
 
 
SELECT *  From #tempTable 
Where text like '%logi%'

		drop table #tempTable
GO


------------
 EXEC xp_ReadErrorLog 0, 1, 'Log'


----Reads the current sql server log
exec master..xp_readerrorlog
exec master..xp_readerrorlog 0, 1


- Reads SQL Server error log from ERRORLOG.1 file
EXEC xp_ReadErrorLog 1

--Reads the previous sql server log
exec master..xp_readerrorlog 1, 1

--Reads the current sql server agent log
exec master..xp_readerrorlog 0, 2

--Reads the Login  Failed log
exec master..xp_ReadErrorLog 0, 1, 'Failed', 'login'


/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
--jobs and views


exec sp_msforeachdb 'USE [?]; 

SELECT * FROM sys.sql_modules
where definition like ''%FROM sys.dm_exec_requests%''
' 


Select * from msdb.dbo.sysjobsteps
where Command like '%FROM sys.dm_exec_requests%'








Select B.name as Job_Name,A.* 
	from msdb.dbo.sysjobsteps A
	Left Join  msdb.dbo.sysjobs B
On A.job_id=B.Job_id
where A.command like '%MDS_SourceData_QA%'


/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
--usuarios de una instancia
Create Table ##Users ( 
DbName sysname null, 
UserName sysname null, 
RoleName sysname null, 
LoginName sysname null, 
DefDBName sysname null, 
DefSchemaName sysname null, 
UserID smallint null, 
SID smallint null ) 


exec sp_msforeachdb 'USE [?]; 
ALTER TABLE ##Users ADD CONSTRAINT dt_dbname DEFAULT ''?'' FOR DbName ; 
INSERT ##Users (UserName,RoleName,LoginName,DefDBName,DefSchemaName,UserID,SID) 
exec sp_helpuser; 
ALTER TABLE ##Users DROP CONSTRAINT dt_dbname; ' 

Select @@SERVERNAME as ServerName, DbName, UserName, RoleName
from ##Users
Where dbname not in ('Master', 'Tempdb', 'Model','Msdb')
--drop table ##Users



/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/

--todo lod e un spid

SELECT r.percent_complete, r.estimated_completion_time/1000.0/60.0/60.0, ss.*, ss.spid, ss.status, ss.program_name, ss.cmd, ss.loginame, ss.lastwaittype, sd.name,r.sql_handle, QP.query_plan,
st.text as 'ActiveStatement', 
(SELECT SUBSTRING(text, r.statement_start_offset/2, 
(CASE WHEN r.statement_end_offset = -1 
THEN LEN(CONVERT(nvarchar(max),text)) * 2 
ELSE r.statement_end_offset 
END - r.statement_start_offset)/2) 
FROM sys.dm_exec_sql_text(r.sql_handle)) AS 'ActiveBatch' 
from master.sys.sysprocesses ss
INNER JOIN master.sys.databases sd ON ss.dbid=sd.database_id
INNER JOIN master.sys.dm_exec_requests r ON ss.spid = r.session_id
CROSS APPLY master.sys.dm_exec_query_plan(r.plan_handle) AS QP
CROSS APPLY master.sys.dm_exec_sql_text(r.sql_handle) as st 
where ss.spid!=@@spid


/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
--fast copy
declare  @cmdstr2 varchar(1000)

 set @cmdstr2 = 'copy K:\MSSQL\Backup\Full\ndm*.BKP'
 set @cmdstr2 = @cmdstr2 + '  \\MPLTTAGSC003S1\L$\MSSQL\2k-Backup\Full'


exec master..xp_cmdshell @cmdstr2


-- o entre dsco local


declare  @From varchar(1000)
declare  @To varchar(1000)
declare  @Script varchar(1000)

set @From = 'H:\MSSQL.5\BACKUP\CSE4INST124\BACKUPDB\ENTR_SDC_db_20130610201330.bak'
set @To ='D:\DBA'


Set @Script = 'Copy '+@From+'  '+@to
exec master..xp_cmdshell @Script


/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
--charindez
/*--de aaron

DECLARE @x varchar(max) 
SET @x = 'Minor|PRODUCTIqeqweON|dba-mssqlserver@mplttauhsh014||Warning: MSSQLServer@MPLTTAUHSH014: BOFA_DBSS - Jobs'
SELECT 
CHARINDEX('@', @x) as '@'
, CHARINDEX ('|', @X, CHARINDEX('@', @x)) as '|'
, SUBSTRING(@X, CHARINDEX('@', @x)+1, CHARINDEX ('|', @X, CHARINDEX('@', @x))-CHARINDEX('@', @x)-1)as Name

---error


DECLARE @x varchar(max) 
SET @x = 'Minor|PRODUCTION|dba-mssqlserver@mplttbgsc001s0|Warning: MSSQLServer@MPLTTBGSC001S0: DBSS - Fixed Data File Used FMS server LLTWA00F reports: MSSQLServer@MPLTTBGSC001S0: The data file DCTP_ImageRepository_2 (N:\MSSQL\Data\DCTP_ImageRepository_2.NDF)in database DCTP_ImageRepository is 78% full.: DBSS - . dba-mssqlserver@mplttbgsc001s0;SQL_DBSS_Fixed_Data_File_Used'

SELECT 
CHARINDEX('@', @x) as '@'
, CHARINDEX ('|', @X, CHARINDEX('@', @x)) as '|'
, SUBSTRING(@X, CHARINDEX('@', @x)+1, CHARINDEX ('|', @X, CHARINDEX('@', @x))-CHARINDEX('@', @x)-1)as Name


--
--Select *  from dbo.IncidentReportJan
--


---- SCRIPT
--UPDATE INCIDENTREPORTJAN
--SET INCIDENT#SUMMARY='WARNING: MSSQLSERVER@USVMSQAIQC02: BOFA_DBSS - JOBS FAILED FMS SERVER LRCHA79559 REPORTS: MSSQLSERVE|'
----SELECT * FROM INCIDENTREPORTJAN
--WHERE [INCIDENT#TICKET ID]='IM17106137'

--UPDATE INCIDENTREPORTJAN
--SET INCIDENT#SUMMARY='WARNING: MSSQLSERVER@MPTELCOWSH100: DBSS - JOBS FAILED FMS SERVER LLTWA00D REPORTS: MSSQLSERVER@MPTE|'
----SELECT * FROM INCIDENTREPORTJAN
--WHERE [INCIDENT#TICKET ID]='IM17120809'

--UPDATE INCIDENTREPORTJAN
--SET INCIDENT#SUMMARY='Finder Prod Issue:Duplicate Account Key Deletion|'
----SELECT * FROM INCIDENTREPORTJAN
--WHERE [INCIDENT#TICKET ID]='IM17143396'


--UPDATE INCIDENTREPORTJAN
--SET INCIDENT#SUMMARY='|'
----SELECT * FROM INCIDENTREPORTJAN
--WHERE [INCIDENT#TICKET ID]=''


------


--


select * Into #temporal from IncidentReportJan



-------------

SELECT *, SUBSTRING(INCIDENT#SUMMARY, 
	CHARINDEX('@', INCIDENT#SUMMARY)+1, 
CHARINDEX('@', INCIDENT#SUMMARY)
	)as ServerName 

into #temporal

from IncidentReportJan
 WHERE [INCIDENT#SUMMARY] like '%@%'
 
 ------------

 
 Select 
		[Incident#Ticket ID]as  Incident_Ticket_ID ,                                                                                                                                                                                                                                          
		Incident#Summary   as Incident_Summary   ,                                                                                                                                                                                                                                          
		[Incident#Cause Code]   as Incident_Cause_Code  ,                                                                                                                                                                                                                                            
		[Incident#Owner Group]     as    Incident_Owner_Group ,                                                                                                                                                                                                                                   
		[Incident#Severity]  as Incident_Severity,
		[Incident#Status]    as Incident_Status,                                                                                                                                                                                                                                 
		[Incident#Actual Finish (GMT)]  as Incident_Actual_Finish_GMT  ,
		[Type] as Type, 
		
		
		SUBSTRING(ServerName, -0, 
		CHARINDEX('|', ServerName)
	)as ServerNames 
	into #temporal1
	From #temporal
go
drop table #temporal
go
Select COUNT(*) from  #temporal1
select COUNT(*) from dbo.IncidentReportJan

--


select * from dbo.IncidentReportJan





*/

DECLARE @x varchar(max) 
SET @x = 'Minor|PRODUCTION|dba-mssqlserver@mplttbgsc001s0|Warning: MSSQLServer@MPLTTBGSC001S0: DBSS - Fixed Data File Used FMS server LLTWA00F reports: MSSQLServer@MPLTTBGSC001S0: The data file DCTP_ImageRepository_2 (N:\MSSQL\Data\DCTP_ImageRepository_2.NDF)in database DCTP_ImageRepository is 78% full.: DBSS - . dba-mssqlserver@mplttbgsc001s0;SQL_DBSS_Fixed_Data_File_Used'

SELECT 
CHARINDEX('@', @x) as '@'
, CHARINDEX ('|', @X, CHARINDEX('@', @x)) as '|'
, SUBSTRING(@x,CHARINDEX('@', @x)+1, CHARINDEX('@', @x)) as name1,
 SUBSTRING(@X, CHARINDEX('@', @x)+1, CHARINDEX ('|', @X, CHARINDEX('@', @x))-CHARINDEX('@', @x)-1)as Name2,
		
	@x as original









/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
--Waiting task
ELECT
    owt.session_id,
    owt.wait_duration_ms,
    owt.wait_type,
    owt.blocking_session_id,
    owt.resource_description,
    es.program_name,
    est.text,
    est.dbid,
    eqp.query_plan,
    es.cpu_time,
    es.memory_usage
FROM sys.dm_os_waiting_tasks owt
INNER JOIN sys.dm_exec_sessions es
    ON owt.session_id = es.session_id
INNER JOIN sys.dm_exec_requests er    ON es.session_id = er.session_id
OUTER APPLY sys.dm_exec_sql_text (er.sql_handle) est
OUTER APPLY sys.dm_exec_query_plan (er.plan_handle) eqp
WHERE es.is_user_process = 1;
GO

/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
--borra por un while
DECLARE @TargetSize INT, @SQLStatement VARCHAR(300)
SELECT @TargetSize = 368850
WHILE @TargetSize > 365000
BEGIN

SELECT @SQLStatement = '
USE HeinzInt1_SITE
DBCC SHRINKFILE(1, '+CONVERT(VARCHAR, @TargetSize)+')
'
print @SQLStatement
EXEC (@SQLStatement)

select @TargetSize = @TargetSize - 50

END

/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
--borra fisicos


DECLARE @name VARCHAR(500),
                                @Message VARCHAR(500),
                                @checkfile INT, 
                                @cmddel VARCHAR(500), 
                                @Retdays TINYINT, 
                                @Directory VARCHAR(500), 
                                @Wildcard INT,
                                @StartDateTime DATETIME,
                                @Date VARCHAR(50),
                                @Time VARCHAR(50),
                                @StartDate VARCHAR(50),
                                @StartTime VARCHAR(50),
                                @Filename VARCHAR(500),
                                @backupCmd VARCHAR(500),
                                @results int


SELECT @Retdays = 3,
		@Directory = 'E:\Program Files\Microsoft SQL Server\MSSQL10.SQLEXPRESS\MSSQL\Backup'

                                DECLARE @FilesToErase TABLE(Data varchar(500))
                                SET @StartDateTime = DATEADD(D,-@retdays,GETDATE() )
                                SET @Date =  CONVERT (varchar(30),@startDateTime,101)
                                SET @StartDate = SUBSTRING(@Date,7,4) + SUBSTRING(@Date,1,2) + SUBSTRING(@Date,4,2) 
                                SET @backupCmd = 'DIR ' + @Directory + '*.bak'
                                INSERT @FilesToErase
                                EXEC master..xp_cmdshell @backupCmd
                                UPDATE @FilesToErase SET Data = LTRIM(RIGHT(Data, LEN(Data)- (LEN(Data) - CHARINDEX(SPACE(1),REVERSE(Data),0))))
                                DELETE @FilesToErase WHERE Data NOT LIKE '%.bak' OR LEN(Data)<18 OR Data IS NULL
                                DECLARE FL_Cursor CURSOR FOR
                                                SELECT Data FROM @FilesToErase
                                                WHERE LEFT(RIGHT(Data,LEN(Data)-CHARINDEX('.',Data)),8) < @StartDate
                     OPEN FL_Cursor
                    FETCH NEXT FROM FL_Cursor INTO @name
                                WHILE @@FETCH_STATUS = 0
                                                BEGIN
                                                                SET @backupCmd = 'DEL ' + @Directory + @Name + ' /f/q'
                                                                EXEC master..xp_cmdshell @backupCmd
                                                                FETCH NEXT FROM FL_Cursor INTO @name
                                                END
                    CLOSE FL_Cursor
                    DEALLOCATE FL_Cursor
                                
                                    

/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
--busca en sps

declare 
@strFind varchar (100), 
@varDBName varchar (100)  

set @strFind='As400'
set @varDBName='solise'



declare @varQuery varchar (1000) 

select @varQuery = 

'SELECT distinct ' + 

'name SP_Name, ''sp_helptext '''''' + name + ''''''''SP_HT ' + 

'FROM [' + @varDBName + '].[dbo].[sysobjects] inner join [' + @varDBName + '].[dbo].[syscomments] ' + 

'on [' + @varDBName + '].[dbo].[sysobjects].id = [' + @varDBName + '].[dbo].[syscomments].id ' + 

'where xtype = ''P'' ' + 

'and text like ''%' + @strFind + '%'' ' + 

'order by name ' 

exec (@varQuery) 

/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/

--busca en tablas



select * from sys.tables
where name like '%User%'


select object_name(Object_id) from sys.columns 
where name like '%Passwor%'


DCP/APPSUPPORT/GASUP

/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
--camb ia datafile locations
Statup paraetros de sql08
-dE:\SQL2008\MSSQL10.MSSQLSERVER\MSSQL\DATA\master.mdf;-eE:\SQL2008\MSSQL10.MSSQLSERVER\MSSQL\Log\ERRORLOG;-lE:\SQL2008\MSSQL10.MSSQLSERVER\MSSQL\DATA\mastlog.ldf



-- modifica la info y pasala a el nuevo diredctorio..

ALTER DATABASE model 
MODIFY FILE ( NAME = modeldev , FILENAME = 'E:\SQL2008\MSSQL10.MSSQLSERVER\MSSQL\DATA\model.mdf' )
GO
ALTER DATABASE model 
MODIFY FILE ( NAME = modellog , FILENAME = 'E:\SQL2008\MSSQL10.MSSQLSERVER\MSSQL\DATA\modellog.ldf' )
GO

ALTER DATABASE msdb 
MODIFY FILE ( NAME = MSDBData , FILENAME = 'E:\SQL2008\MSSQL10.MSSQLSERVER\MSSQL\DATA\MSDBData.mdf' )
GO
ALTER DATABASE msdb 
MODIFY FILE ( NAME = MSDBLog , FILENAME = 'E:\SQL2008\MSSQL10.MSSQLSERVER\MSSQL\DATA\MSDBLog.ldf' )
GO

-- no necesitas cambiarla.. sola se crea..

ALTER DATABASE tempdb 
MODIFY FILE (NAME = tempdev, FILENAME = 'E:\SQL2008\MSSQL10.MSSQLSERVER\MSSQL\DATA\tempdb.mdf');
GO
ALTER DATABASE tempdb 
MODIFY FILE (NAME = templog, FILENAME = 'E:\SQL2008\MSSQL10.MSSQLSERVER\MSSQL\DATA\templog.ldf');
GO


/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
--tablas bloqueadas

 SELECT  L.request_session_id AS SPID, 
        DB_NAME(L.resource_database_id) AS DatabaseName,
        O.Name AS LockedObjectName, 
        P.object_id AS LockedObjectId, 
        L.resource_type AS LockedResource, 
        L.request_mode AS LockType,
        ST.text AS SqlStatementText,        
        ES.login_name AS LoginName,
        ES.host_name AS HostName,
        TST.is_user_transaction as IsUserTransaction,
        AT.name as TransactionName,
        CN.auth_scheme as AuthenticationMethod
FROM    sys.dm_tran_locks L
        JOIN sys.partitions P ON P.hobt_id = L.resource_associated_entity_id
        JOIN sys.objects O ON O.object_id = P.object_id
        JOIN sys.dm_exec_sessions ES ON ES.session_id = L.request_session_id
        JOIN sys.dm_tran_session_transactions TST ON ES.session_id = TST.session_id
        JOIN sys.dm_tran_active_transactions AT ON TST.transaction_id = AT.transaction_id
        JOIN sys.dm_exec_connections CN ON CN.session_id = ES.session_id
        CROSS APPLY sys.dm_exec_sql_text(CN.most_recent_sql_handle) AS ST
WHERE   resource_database_id = db_id()
ORDER BY L.request_session_id


/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
--check db
dbcc checkdb ('HH_Test') with no_infomsgs
or

dbcc checkdb ('HH_Test') 


/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
/****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****//****/
--compresion
sp_CONFIGURE 'show advanced options',1
RECONFIGURE


	sp_configure 'backup compression default'

go

sp_configure 'backup compression default',1
go
reconfigure





///////////permissions


select @@SERVERNAME Server
,sl.name
,isnull(DB_Roles.Roles,'Public')  Permission
from sys.syslogins sl
left join
(
select 'sysadmin' as Roles
union all 
select 'securityadmin' 
union all 
select 'serveradmin' 
union all 
select 'setupadmin' 
union all 
select 'processadmin' 
union all 
select 'diskadmin' 
union all 
select 'dbcreator' 
union all 
select 'bulkadmin' 
union all 
select 'No serverRole' 
union all
select 'public'
) DB_Roles 
on 
Case When sl.sysadmin=1 and DB_Roles.Roles='sysadmin' then 'sysadmin'  
	When sl.securityadmin=1 and DB_Roles.Roles='securityadmin' then 'securityadmin'
	When sl.serveradmin=1 and DB_Roles.Roles='serveradmin' then 'serveradmin' 
	When sl.setupadmin=1 and DB_Roles.Roles='setupadmin' then 'setupadmin' 
	When sl.processadmin=1 and DB_Roles.Roles='processadmin' then 'processadmin' 
	When sl.diskadmin=1 and DB_Roles.Roles='diskadmin' then 'diskadmin' 
	When sl.dbcreator=1 and DB_Roles.Roles='dbcreator' then 'dbcreator'  
	When sl.bulkadmin=1 and DB_Roles.Roles='bulkadmin' then 'bulkadmin' 
	else null end=DB_Roles.Roles
	
order by 2