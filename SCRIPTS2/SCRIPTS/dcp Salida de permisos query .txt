--Also execute the following stored procedures to get a detail depending on whatpermissions you need to retain and verify (source or destination database)
--
--USE [DbName]
--GO
--Exec sp_helpuser
--GO
---Exec sp_helprotect
--8192
SET NOCOUNT ON
----
	
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
CREATE TABLE #Pemissions(
	Id int NOT NULL IDENTITY (1, 1),
	dbName	[Varchar](80)Not null,
	Msj [text] NOT NULL 
	)
--------------------------------------------------------------------	
--------------------------------------------------------------------	
--------------------------------------------------------------------

	Select * from #Pemissions
--------------------------------------------------------------------
--Drop Table #Pemissions 
--Select Id ,Msj,dbName from #Pemissions

Declare @dbNamedb as [Varchar](80)
------
Set @dbNamedb ='Databasename'
------
Declare @CountID as [Varchar](5)
Set @CountID = (Select COUNT (*) from #Pemissions 
			   where dbName like @dbNamedb)

--select  @CountID

	
---------------------------------------
If @CountID='0'
Begin

	Insert into #Pemissions 









--------------------------------------- 

SELECT ltrim(rtrim(@dbNamedb)),	'USE' + SPACE(1) + QUOTENAME(DB_NAME()) AS '--Database Context'


---------------------------------------
Insert into #Pemissions 

---------------------------------------


--- Script Roles

	SELECT ltrim(rtrim(@dbNamedb)),
	'IF  EXISTS (SELECT * FROM sys.database_principals WHERE name = N' + quotename(rl.name,'''') + ' AND type = ''R'')
	DROP ROLE ' + quotename(rl.name) + '
	GO
	CREATE ROLE ' + quotename(rl.name) + '
	GO' AS '--Roles'
	---'Server[@Name=' + quotename(CAST(serverproperty(N'Servername') AS sysname),'''') + ']' + '/Database[@Name=' + quotename(db_name(),'''') + ']' + '/Role[@Name=' + quotename(rl.name,'''') + ']' AS [Urn],rl.name AS [Name] 
	FROM sys.database_principals AS rl
	WHERE (rl.type = 'R') and (CAST(CASE WHEN rl.principal_id > 16383 AND rl.principal_id < 16400 THEN 1 ELSE 0 END AS bit)=0 and rl.name<>N'public')
	ORDER BY[Name] ASC


---------------------------------------
Insert into #Pemissions
 
---------------------------------------
--Script Users

	SELECT ltrim(rtrim(@dbNamedb)),
	Case When u.name= u.default_schema_name Then 'ALTER AUTHORIZATION ON SCHEMA::' + QUOTENAME(u.default_schema_name) + ' TO [dbo]'
	+ CHAR(13) + CHAR(10) + 'GO' + CHAR(13) + CHAR(10) Else '' End +
	'IF  EXISTS (SELECT * FROM sys.database_principals WHERE name = N''' +  u.name + ''')
		DROP USER ' + QUOTENAME(u.name) + CHAR(13) + CHAR(10) + 'GO' + CHAR(13) + CHAR(10) +
	'CREATE USER ' + QUOTENAME(u.name) + ' ' +
	Case When suser_sname(u.sid) is null Then '' Else 'FOR LOGIN ' + QUOTENAME(suser_sname(u.sid) ) End +
	Case When cert.name is null Then '' Else 'FOR CERTIFICATE ' + QUOTENAME(cert.name) End + 
	CAse When ak.name is null Then '' Else 'FOR ASYMMETRIC KEY ' + QUOTENAME(ak.name) End + 
	CAse When suser_sname(u.sid) is null  and cert.name is null and ak.name is null Then 'WITHOUT LOGIN ' Else '' End + 
	Case When u.default_schema_name is null Then '' Else ' WITH DEFAULT_SCHEMA=' + QUOTENAME(u.default_schema_name) End +
	CHAR(13) + CHAR(10) + 'GO' + CHAR(13) + CHAR(10) +
	Case When u.name= u.default_schema_name Then 'ALTER AUTHORIZATION ON SCHEMA::' + QUOTENAME(u.default_schema_name) + ' TO ' + QUOTENAME(u.name) + CHAR(13) + CHAR(10) + 'GO' + CHAR(13) + CHAR(10)  Else '' End 
	AS '--Users'
	/*
	u.name AS [Name],
	u.principal_id AS [ID],
	ISNULL(suser_sname(u.sid),N'') AS [Login],
	CAST(CASE WHEN u.principal_id < 5 OR u.principal_id = 16382 OR u.principal_id = 16383 THEN 1 ELSE 0 END AS bit) AS [IsSystemObject],
	CASE WHEN N'U' = u.type THEN 0 WHEN N'G' = u.type THEN 1 WHEN N'S' = u.type THEN 2 WHEN N'C' = u.type THEN 3 WHEN N'K' = u.type THEN 4 END AS [LoginType],
	CAST(CASE dp.state WHEN N'G' THEN 1 WHEN 'W' THEN 1 ELSE 0 END AS bit) AS [HasDBAccess],
	u.sid AS [Sid],
	CASE WHEN N'C' = u.type THEN 1 WHEN N'K' = u.type THEN 2 WHEN N'S' = u.type AND suser_sname(u.sid) IS NULL THEN 3 ELSE 0 END AS [UserType],
	ISNULL(cert.name,N'') AS [Certificate],
	ISNULL(ak.name,N'') AS [AsymmetricKey],
	u.create_date AS [CreateDate],
	u.modify_date AS [DateLastModified],
	ISNULL(u.default_schema_name,N'') AS [DefaultSchema]
	*/
	FROM
	sys.database_principals AS u
	LEFT OUTER JOIN sys.database_permissions AS dp ON dp.grantee_principal_id = u.principal_id and dp.type = N'CO'
	LEFT OUTER JOIN sys.certificates AS cert ON cert.sid = u.sid
	LEFT OUTER JOIN sys.asymmetric_keys AS ak ON ak.sid = u.sid
	WHERE
	(u.type in ('U', 'S', 'G', 'C', 'K')) and CAST(CASE WHEN u.principal_id < 5 OR u.principal_id = 16382 OR u.principal_id = 16383 THEN 1 ELSE 0 END AS bit)=0


---------------------------------------
Insert into #Pemissions
 
---------------------------------------




	SELECT	ltrim(rtrim(@dbNamedb)), 'EXEC sp_addrolemember @rolename =' 
		+ SPACE(1) + QUOTENAME(USER_NAME(rm.role_principal_id), '''') + ', @membername =' + SPACE(1) + QUOTENAME(USER_NAME(rm.member_principal_id), '''') AS '--Role Memberships'
	FROM	sys.database_role_members AS rm
	---WHERE	USER_NAME(rm.member_principal_id) = @OldUser
	ORDER BY rm.role_principal_id ASC


---------------------------------------
Insert into #Pemissions 
	---------------------------------------
	SELECT ltrim(rtrim(@dbNamedb)),	CASE WHEN perm.state <> 'W' THEN perm.state_desc ELSE 'GRANT' END
		+ SPACE(1) + perm.permission_name 
		+ CASE WHEN cl.column_id IS NULL THEN SPACE(0) ELSE ' (' + QUOTENAME(cl.name) + ')' END
		+ SPACE(1) + 'ON ' + QUOTENAME(USER_NAME(obj.schema_id)) + '.' + QUOTENAME(obj.name) 
		+ SPACE(1) + 'TO' + SPACE(1) + QUOTENAME(usr.name) COLLATE database_default
		+ CASE WHEN perm.state <> 'W' THEN SPACE(0) ELSE SPACE(1) + 'WITH GRANT OPTION' END AS '--Object Level Permissions'
	FROM	sys.database_permissions AS perm
		INNER JOIN
		sys.objects AS obj
		ON perm.major_id = obj.[object_id]
		INNER JOIN
		sys.database_principals AS usr
		ON perm.grantee_principal_id = usr.principal_id
		LEFT JOIN
		sys.columns AS cl
		ON cl.column_id = perm.minor_id AND cl.[object_id] = perm.major_id
	---WHERE	usr.name = @OldUser
	ORDER BY perm.permission_name ASC, perm.state_desc ASC

---------------------------------------
Insert into #Pemissions 
--------------------------------------

	SELECT	ltrim(rtrim(@dbNamedb)), CASE WHEN perm.state <> 'W' THEN perm.state_desc ELSE 'GRANT' END
		+ SPACE(1) + perm.permission_name + SPACE(1)
		+ SPACE(1) + 'TO' + SPACE(1) + QUOTENAME(usr.name) COLLATE database_default
		+ CASE WHEN perm.state <> 'W' THEN SPACE(0) ELSE SPACE(1) + 'WITH GRANT OPTION' END AS '--Database Level Permissions'
	FROM	sys.database_permissions AS perm
		INNER JOIN
		sys.database_principals AS usr
		ON perm.grantee_principal_id = usr.principal_id
	---WHERE	usr.name = @OldUser
	AND	perm.major_id = 0
	ORDER BY perm.permission_name ASC, perm.state_desc ASC


---------------------------------------

Select Id ,Msj,dbName from #Pemissions
Order by Id
---------------------------------------

End


--This example writes the contents of the current directory to a file named dir_out.txt in the current server directory.

DECLARE @cmd sysname, @var sysname
SET @var = 'C:\DIR\'
SET @cmd = @var + ' > dir_out.txt'
EXEC master..xp_cmdshell @cmd












-----------------

--Declare @dbNamedb as [Varchar](80)
--------
--Set @dbNamedb ='DBRestoreSinLog'

---------------------------

--Declare @NextID as Int 
--Declare @CurrentID as Int 
--Declare @Command as Varchar (8000)



--Set @NextID =(Select Min(id) from #Pemissions)
--set @CurrentID=0


----Select @NextID
----select @CurrentID

--WHILE @NextID>@CurrentID
--BEGIN
--	Select @Command= msj from #Pemissions where Id=@NextID
-- Set @CurrentID=@NextID
-- Set @NextID =(Select min (ID)  From #Pemissions Where Id >@CurrentID)
-- Print 'USE ['+@dbNamedb+'] Go '+@Command
 
 
 
-- End
 






