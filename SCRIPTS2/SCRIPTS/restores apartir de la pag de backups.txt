SELECT TOP 100
      BS.database_name, 
      BS.backup_start_date,
      BS.backup_finish_date,
      DATEDIFF(second, BS.backup_start_date, BS.backup_finish_date ) TimeSecsCreation,
      BS.type, -- L = LOG , I = Differential, D = Full
      BMF.media_set_id, 
      BMF.physical_device_name,
      'RESTORE LOG [' + BS.database_name  +']   
      FROM DISK=''' + BMF.physical_device_name + '''
      WITH NORECOVERY; --RECOVERY' AS RestoreStmtSQL,
      'EXEC master.dbo.xp_restore_log @Database = ' + QUOTENAME(BS.database_name,'''') + ', @filename=' + QUOTENAME(BMF.physical_device_name,'''') + ', @WITH = ''NORECOVERY'''  AS RestoreStmtLS
FROM 
      msdb.dbo.backupset BS
      INNER JOIN msdb.dbo.backupmediafamily BMF ON BMF.media_set_id = BS.media_set_id
WHERE 
      --BS.database_name in( 'IC3_MAINP') AND 
      BS.type IN ('L')
      AND BS.backup_start_date > '2013-04-23 16:36:01.000'
ORDER BY
      BS.backup_start_date ASC 
------------------------------------------------------



DECLARE @DBname VARCHAR(100)

SET @DBNAME='DBA_INV_CENTRAL' --Change DB Name


SET NOCOUNT ON

DECLARE @lastFullBackup INT, @lastFullBackupPath VARCHAR(2000), @lastDifferentialBackup INT, @lastDifferentialBackupPath VARCHAR(2000)
DECLARE @i INT, @logBackupPath VARCHAR(1000)

-- remove temp object that might exist
IF OBJECT_ID('tempdb..#MSDBBackupHistory') IS NOT NULL
    DROP TABLE #MSDBBackupHistory

CREATE TABLE #MSDBBackupHistory (
    id INT IDENTITY(1,1),
    backup_start_date DATETIME,
    backup_type CHAR(1),
    physical_device_name VARCHAR(1000))

INSERT INTO #MSDBBackupHistory (backup_start_date,  backup_type, physical_device_name)
    SELECT BS.backup_start_date, BS.type, RTRIM(BMF.physical_device_name)
    FROM msdb..backupset BS JOIN msdb..backupmediafamily BMF ON BMF.media_set_id=BS.media_set_id
    WHERE BS.database_name = @DBName
    ORDER BY BS.backup_start_date -- dump the last backup first in table

-- get the last Full backup info.
SET @lastFullBackup = (SELECT MAX(id) FROM #MSDBBackupHistory WHERE backup_type='D')
SET @lastFullBackupPath = (SELECT physical_device_name FROM #MSDBBackupHistory WHERE id=@lastFullBackup)

-- Restore the Full backup
PRINT 'exec master.dbo.xp_restore_database @database = ''' + @DBName +''''+','
PRINT '@filename =''' + @lastFullBackupPath + ''''+','

-- IF it's there's no backup (differential or log) after it, we set to 'with recovery'
IF (@lastFullBackup = (SELECT MAX(id) FROM #MSDBBackupHistory))
    PRINT '@WITH = ''RECOVERY'''
ELSE PRINT '@WITH = ''NORECOVERY'''

PRINT 'GO'
PRINT ''

-- get the last Differential backup (it must be done after the last Full backup)
SET @lastDifferentialBackup = (SELECT MAX(id) FROM #MSDBBackupHistory WHERE backup_type='I' AND id > @lastFullBackup)
SET @lastDifferentialBackupPath = (SELECT physical_device_name FROM #MSDBBackupHistory WHERE id=@lastDifferentialBackup)

-- when there's a differential backup after the last full backup create the restore T-SQL commands
IF (@lastDifferentialBackup IS NOT NULL)
BEGIN
    -- Restore last diff. backup
    PRINT 'exec master.dbo.xp_restore_database @database = ''' + @DBName +''''+','
    PRINT '@filename =''' + @lastDifferentialBackupPath + ''''+','

    -- If no backup made (differential or log) after it, set to 'with recovery'
    IF (@lastDifferentialBackup = (SELECT MAX(id) FROM #MSDBBackupHistory))
            PRINT '@WITH = ''RECOVERY'''
      ELSE PRINT '@WITH = ''NORECOVERY'''

    PRINT 'GO'
    PRINT '' -- new line for readability
END

-- construct the required TRANSACTION LOGs restores
IF (@lastDifferentialBackup IS NULL) -- no diff backup made?
    SET @i = @lastFullBackup + 1    -- search for log dumps after the last full
ELSE SET @i = @lastDifferentialBackup + 1 -- search for log dumps after the last diff

-- script T-SQL restore commands from the log backup history
WHILE (@i <= (SELECT MAX(id) FROM #MSDBBackupHistory))
BEGIN 
    SET @logBackupPath = (SELECT physical_device_name FROM #MSDBBackupHistory WHERE id=@i)
    PRINT 'EXEC master.dbo.xp_restore_log @database='''+@DBName+''''+','
    PRINT '@filename = ''' + @logBackupPath + ''''+','

    -- it's the last transaction log, set to 'with recovery'
    IF (@i = (SELECT MAX(id) FROM #MSDBBackupHistory))
            PRINT '@WITH = ''RECOVERY'''
      ELSE PRINT '@WITH = ''NORECOVERY'''

    PRINT 'GO'
    PRINT '' -- new line for readability

    SET @i = @i + 1 -- try to find the next log entry
END

-- remove temp objects that exist
IF OBJECT_ID('tempdb..#MSDBBackupHistory') IS NOT NULL 
    DROP TABLE #MSDBBackupHistory
